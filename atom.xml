<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[KNNA-个人博客]]></title>
  <subtitle><![CDATA[.NET Developer]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.knna.me/"/>
  <updated>2015-12-30T05:44:08.000Z</updated>
  <id>http://www.knna.me/</id>
  
  <author>
    <name><![CDATA[KNNA]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[WPF使用ListBox进行分组和大量数据虚拟化操作]]></title>
    <link href="http://www.knna.me/2015/11/06/WPF%E4%BD%BF%E7%94%A8ListBox%E8%BF%9B%E8%A1%8C%E5%88%86%E7%BB%84%E5%92%8C%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E8%99%9A%E6%8B%9F%E5%8C%96%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.knna.me/2015/11/06/WPF使用ListBox进行分组和大量数据虚拟化操作/</id>
    <published>2015-11-06T04:48:58.000Z</published>
    <updated>2015-12-30T05:44:08.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ListBox分组">ListBox分组</h1><p>在列表控件中我们偶尔会用到分组功能，比如这里示例的用户数据集合，我想要在ListBox中对创建时间中不同的年月进行分组显示，这时可以使用CollectionViewSource作为listbox的数据源，而我们只需要操作CollectionViewSource对象就能实现数据分组加载的效果。<br>在前端XAML代码中申明CollectionViewSource对象，并设置此对象的排序字段为CreateTime，排序方式为Descending。其次是指定组分字段CreateTime，并绑定分组转换器。<br>XAML代码：<br>xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">local:MouthGroupConverter</span> <span class="attribute">x:Key</span>=<span class="value">"groupConverter"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">local:UserDisplayConverter</span> <span class="attribute">x:Key</span>=<span class="value">"userDisplayConverter"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">CollectionViewSource</span> <span class="attribute">x:Key</span>=<span class="value">"DataListView"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">CollectionViewSource.SortDescriptions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">component:SortDescription</span> <span class="attribute">PropertyName</span>=<span class="value">"CreateTime"</span> <span class="attribute">Direction</span>=<span class="value">"Descending"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">CollectionViewSource.SortDescriptions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">CollectionViewSource.GroupDescriptions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">PropertyGroupDescription</span> <span class="attribute">PropertyName</span>=<span class="value">"CreateTime"</span> <span class="attribute">Converter</span>=<span class="value">"&#123;StaticResource groupConverter&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">CollectionViewSource.GroupDescriptions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">CollectionViewSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">Window.Resources</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>分组转换器<br>cs<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 按年月分组转换器</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title">MouthGroupConverter</span> : <span class="title">IValueConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Convert</span>(<span class="params"><span class="keyword">object</span> <span class="keyword">value</span>, Type targetType, <span class="keyword">object</span> parameter, System.Globalization.CultureInfo culture</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        DateTime dt = (DateTime)<span class="keyword">value</span>;</span><br><span class="line">        <span class="keyword">return</span> dt.Year + <span class="string">"年 - "</span> + dt.Month + <span class="string">"月"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">ConvertBack</span>(<span class="params"><span class="keyword">object</span> <span class="keyword">value</span>, Type targetType, <span class="keyword">object</span> parameter, System.Globalization.CultureInfo culture</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在listbox中将itemsSource数据源绑定为CollectionViewSource 对象的实例。<br>xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ListBox</span> <span class="attribute">Name</span>=<span class="value">"lstBox"</span> <span class="attribute">DockPanel.Dock</span>=<span class="value">"Top"</span> <span class="attribute">ItemsSource</span>=<span class="value">"&#123;Binding Source=&#123;StaticResource DataListView&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="title">ListBox</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>重写listbox的子项模板，在模板中使用一个TextBlock，并使用多值转换器格式化数据然后绑定到Text属性。<br>xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ListBox.GroupStyle</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">GroupStyle</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">GroupStyle.HeaderTemplate</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">DataTemplate</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="title">Grid</span> <span class="attribute">Background</span>=<span class="value">"Green"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="title">StackPanel</span> <span class="attribute">Orientation</span>=<span class="value">"Horizontal"</span> <span class="attribute">HorizontalAlignment</span>=<span class="value">"Stretch"</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="title">TextBlock</span> <span class="attribute">Text</span>=<span class="value">"&#123;Binding Path=Name&#125;"</span> <span class="attribute">FontWeight</span>=<span class="value">"Bold"</span> <span class="attribute">Foreground</span>=<span class="value">"White"</span> <span class="attribute">Margin</span>=<span class="value">"0,5,0,0"</span> <span class="attribute">Padding</span>=<span class="value">"3"</span>/&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="title">TextBlock</span> <span class="attribute">Text</span>=<span class="value">"&#123;Binding Path=ItemCount,StringFormat=' 共&#123;0&#125;条数据'&#125;"</span> <span class="attribute">HorizontalAlignment</span>=<span class="value">"Stretch"</span></span><br><span class="line">                                               <span class="attribute">FontWeight</span>=<span class="value">"Bold"</span> <span class="attribute">Foreground</span>=<span class="value">"White"</span> <span class="attribute">Margin</span>=<span class="value">"0,5,0,0"</span> <span class="attribute">Padding</span>=<span class="value">"3"</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="title">StackPanel</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="title">Grid</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="title">DataTemplate</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">GroupStyle.HeaderTemplate</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">GroupStyle</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">ListBox.GroupStyle</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>前端XAML代码中绑定完成后，进入后台代码，对申明数据源实例进行处理，在窗体加载事件中进行。<br>首先模拟一些用户数据，添加到集合中；然后找到XAML中定义的CollectionViewSource数据源对象”DataListView”。<br>可以设置数据对象支持筛选功能，并选择是否启用实时分组，实时筛选，实时排序等功能。<br>后台代码：<br>cs<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">ObservableCollection&lt;User&gt; _source = <span class="keyword">new</span> ObservableCollection&lt;User&gt;();</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">MainWindow_Loaded</span><span class="params">(object sender, RoutedEventArgs e)</span></span><br><span class="line">       </span>&#123;</span><br><span class="line">           DateTime dt = DateTime.Now.AddMonths(-<span class="number">13</span>);</span><br><span class="line">           Random random = <span class="keyword">new</span> Random();</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//数据集合</span></span><br><span class="line">               User user = <span class="keyword">new</span> User();</span><br><span class="line">               user.Name = <span class="string">"张三"</span> + i.ToString(<span class="string">"000000"</span>);</span><br><span class="line">               user.CreateTime = dt.AddMonths(random.Next(<span class="number">1</span>, <span class="number">14</span>)).AddDays(random.Next(-<span class="number">30</span>, <span class="number">60</span>)).AddMinutes(random.Next(-<span class="number">60</span>, <span class="number">120</span>));</span><br><span class="line">               _source.Add(user);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           CollectionViewSource cvs = <span class="keyword">this</span>.FindResource(<span class="string">"DataListView"</span>) as CollectionViewSource;</span><br><span class="line">           cvs.Source = _source;</span><br><span class="line">           ListCollectionView lcv = cvs.View as ListCollectionView;</span><br><span class="line">           <span class="comment">//筛选数据委托</span></span><br><span class="line">           lcv.Filter = obj =&gt; </span><br><span class="line">           &#123; </span><br><span class="line">               User u = (obj as User);</span><br><span class="line">               <span class="keyword">if</span> (u.CreateTime.Year &gt; <span class="number">2012</span>)</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//启用实时筛选，排序，分组，启用任意一项将影响数据虚拟化速度，数据过多时，使加载时间非常长</span></span><br><span class="line">           <span class="comment">//数据条目为10万行，启用一下四行代码中任意一行将多耗时5秒左右，根据电脑性能不同时间有所不同。</span></span><br><span class="line"></span><br><span class="line">           lcv.IsLiveGrouping = <span class="literal">true</span>; </span><br><span class="line">           <span class="comment">//lcv.IsLiveFiltering = true;</span></span><br><span class="line">           <span class="comment">//lcv.IsLiveSorting = true;</span></span><br><span class="line">           <span class="comment">//lcv.LiveFilteringProperties.Add("CreateTime");</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p>
<p>完成后运行程序即可看到分组效果。<br><img src="/images/public/14.jpg" alt="images"></p>
<h1 id="ListBox数据虚拟化">ListBox数据虚拟化</h1><p>关于数据虚拟化：有时候一个列表控件可能需要加载几万或者几十万条的数据，一次性加载到列表控件中，会让整个加载过程非常慢，而且消耗大量内存。这时可以使用数据虚拟化技术，在控件初始化时，只加载控件窗口中正在显示的条目（也就是我们能看到的条目），在滚动或者翻页的时候继续加载后面的条目，前面已加载的被释放掉，这保证了性能也提高了加载速度。<br>在WPF中自带了数据虚拟化的处理类，在System.Windows.Controls命名空间下的VirtualizingStackPanel可以实现数据展现的虚拟化功能，ListBox的默认元素展现容器就是它。所以我们只需要基于前面的代码在listbox中添加一个附加属性即可启用数据虚拟化功能，但是实时排序，实时分组，实时筛选这些功能的启用也会影响加载速度。<br>listbox启用虚拟数据代码：<br>xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ListBox</span> <span class="attribute">Name</span>=<span class="value">"lstBox"</span> <span class="attribute">DockPanel.Dock</span>=<span class="value">"Top"</span> <span class="attribute">ItemsSource</span>=<span class="value">"&#123;Binding Source=&#123;StaticResource DataListView&#125;&#125;"</span> <span class="attribute">VirtualizingPanel.IsVirtualizingWhenGrouping</span>=<span class="value">"True"</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;/<span class="title">ListBox</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在不启用虚拟数据加载时，10万条数据我加载了1分钟还没加载完。。没继续等下去。。。<br>下面是启用虚拟数据加载时的情形：<br>在不启用任何实时功能的情况下，10万条数据大概在2秒就能加载完成，当然加载的只是外面看到的条目。<br>如果启用相关实时功能的话，10万条数据大概需要5-60秒不等。具体可以自己测试。<br>文章示例代码 <a href="http://pan.baidu.com/s/1mhgIsvI" target="_blank" rel="external">点击下载</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="ListBox分组">ListBox分组</h1><p>在列表控件中我们偶尔会用到分组功能，比如这里示例的用户数据集合，我想要在ListBox中对创建时间中不同的年月进行分组显示，这时可以使用CollectionViewSource作为listbox的数据源，而我]]>
    </summary>
    
      <category term="WPF" scheme="http://www.knna.me/tags/WPF/"/>
    
      <category term="DotNet技术" scheme="http://www.knna.me/categories/DotNet%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WPF中的转换器使用详解]]></title>
    <link href="http://www.knna.me/2015/11/02/WPF%E4%B8%AD%E7%9A%84%E8%BD%AC%E6%8D%A2%E5%99%A8%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.knna.me/2015/11/02/WPF中的转换器使用详解/</id>
    <published>2015-11-02T04:48:58.000Z</published>
    <updated>2015-12-30T05:43:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="转换器介绍">转换器介绍</h1><p>在WPF中有随处可见的绑定，很多时候我们不想把的数据直接绑定给对象，而是需要对此数据经过加工再给他，这时候就需要转换器了。<br>比如用户性别，在数据实体中是bool值表示，直接绑定到UI控件上肯定客户是看不懂true/false这样的表示的。<br>这时就可以创建一个转换器，在对象获取绑定值的时候会通过绑定的转换器来进行数据处理，在性别转换器中，他会将bool值转换为对应的“男/女”，然后再返回转换结果给调用者。</p>
<h1 id="转换器示例">转换器示例</h1><h2 id="单值转换器">单值转换器</h2><p>单值转换器：就是只能对绑定的单一对象数据进行转换。<br>比如我们现在有一个用户实体类，其中有一个int类型的Face字段，它保存了此对象的头像索引。<br>把用户实体的Face属性绑定到前端时，直接绑定的话显示出来就是数字。所以需要一个头像转换器，将Face的索引转换为对应的图片对象。<br>用户实体类实现了INotifyPropertyChanged接口，用于属性改变的通知。用户实体代码如下：<br>cs<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span>:<span class="title">INotifyPropertyChanged</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> _id;</span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> 序号</span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> ID</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _id; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _id = <span class="keyword">value</span>; OnPropertyChanged(<span class="keyword">new</span> PropertyChangedEventArgs(<span class="string">"ID"</span>)); &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> _name;</span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> 姓名</span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _name; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _name = <span class="keyword">value</span>; OnPropertyChanged(<span class="keyword">new</span> PropertyChangedEventArgs(<span class="string">"Name"</span>)); &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> _face;</span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> 头像索引</span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Face</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _face; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _face = <span class="keyword">value</span>; OnPropertyChanged(<span class="keyword">new</span> PropertyChangedEventArgs(<span class="string">"Face"</span>)); &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> _age;</span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> 年龄</span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Age</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _age; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _age = <span class="keyword">value</span>; OnPropertyChanged(<span class="keyword">new</span> PropertyChangedEventArgs(<span class="string">"Age"</span>)); &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> DateTime _createTime;</span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> 创建时间</span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> DateTime CreateTime</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _createTime; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _createTime = <span class="keyword">value</span>; OnPropertyChanged(<span class="keyword">new</span> PropertyChangedEventArgs(<span class="string">"CreateTime"</span>)); &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> PropertyChangedEventHandler PropertyChanged;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnPropertyChanged</span>(<span class="params">PropertyChangedEventArgs e</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (PropertyChanged != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                PropertyChanged(<span class="keyword">this</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>头像转换器需要实现IValueConverter接口，代码如下：<br>cs<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 图片转换器</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ImageConverter</span>:<span class="title">IValueConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Convert</span>(<span class="params"><span class="keyword">object</span> <span class="keyword">value</span>, Type targetType, <span class="keyword">object</span> parameter, System.Globalization.CultureInfo culture</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//在XAML中绑定了ConverterParameter参数为1，只为演示，这里用不到</span></span><br><span class="line">        <span class="comment">//不能在ConverterParameter上进行Binding，他不是一个DependencyProperty属性</span></span><br><span class="line">        Int16 p = System.Convert.ToInt16(parameter);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">value</span> == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> imagePath = <span class="string">"images/"</span> + <span class="keyword">value</span> + <span class="string">".png"</span>;</span><br><span class="line">        <span class="keyword">if</span> (!File.Exists(imagePath))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = File.ReadAllBytes(imagePath);</span><br><span class="line">        MemoryStream ms = <span class="keyword">new</span> MemoryStream(buffer);</span><br><span class="line">        BitmapImage image = <span class="keyword">new</span> BitmapImage();</span><br><span class="line">        image.BeginInit();</span><br><span class="line">        image.StreamSource = ms;</span><br><span class="line">        image.EndInit();</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">ConvertBack</span>(<span class="params"><span class="keyword">object</span> <span class="keyword">value</span>, Type targetType, <span class="keyword">object</span> parameter, System.Globalization.CultureInfo culture</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>前端XAML调用时，首先在命名空间中申明转换器所在的空间，实例化转换器实例，然后在需要使用转换器的地方使用静态资源方式进行调用即可。代码：<br>引用转换器命名空间：<br>xml<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:<span class="keyword">local</span>=<span class="string">"clr-namespace:WpfValueConverter"</span></span><br></pre></td></tr></table></figure></p>
<p>实例化转换器实例：<br>xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">local:ImageConverter</span> <span class="attribute">x:Key</span>=<span class="value">"imageConverter"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">Window.Resources</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在绑定数据的位置使用转换器：<br>xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Image</span> <span class="attribute">Height</span>=<span class="value">"25"</span> <span class="attribute">Width</span>=<span class="value">"25"</span> <span class="attribute">Source</span>=<span class="value">"&#123;Binding Face,Converter=&#123;StaticResource  imageConverter&#125;,ConverterParameter=1&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="多值转换器">多值转换器</h2><p>多值转换器：对绑定的多个数据进行转换；在绑定对象中有个数据列表，里面绑定了所有需要转换的数据集合。<br>在我们的窗体后台代码中，创建了一个用户类型，用于保存所有的用户数据，并在前端XAML代码中绑定用户列表数据到ListBox中。<br>当我们直接绑定用户集合到Listbox的ItemsSource属性时，listbox中显示的每个子项就是用户对象直接转换为字符表现形式的样子，这明显不是我们想要的，比如下图：<br><img src="/images/public/12.jpg" alt="images"><br>这时我们有几种方法可以初始化显示的结果</p>
<blockquote>
<ul>
<li>在用户实体中override重写ToString()方法，listbox调用对象tostring()方法时就会调用重写版本。</li>
<li>在listbox中重写ItemTemplate模板，在模板中绑定需要显示的值。</li>
<li>使用前面的单值转换器将用户对象直接转换为需要的字符串结果。</li>
<li>使用多值转换器，将数据列表转换为需要的结果。</li>
</ul>
</blockquote>
<p>第一个和第二个方法是比较简单和常用的；这里不多介绍了，而第三种方法在上面已经介绍过，现在主要介绍第四种方法：使用多值转换器。<br>多值转换器在XAML中使用时和第二个方法类似，也需要重写ItemTemplate模板。但是他在转换器中可以做更多的操作，是最灵活的一种方式。<br>多值转换器代码：<br>cs<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 多数据转换器</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title">UserConverter</span> : <span class="title">IMultiValueConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Convert</span>(<span class="params"><span class="keyword">object</span>[] values, Type targetType, <span class="keyword">object</span> parameter, System.Globalization.CultureInfo culture</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//在XAML中绑定了ConverterParameter参数为1，只为演示，这里用不到</span></span><br><span class="line">        <span class="comment">//不能在ConverterParameter上进行Binding，他不是一个DependencyProperty属性</span></span><br><span class="line">        Int16 p = System.Convert.ToInt16(parameter);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (values[<span class="number">0</span>] == <span class="keyword">null</span> || values[<span class="number">1</span>] == <span class="keyword">null</span> || values[<span class="number">2</span>] == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"用户数据不完整"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">string</span>.Format(<span class="string">"姓名:&#123;0&#125;，年龄：&#123;1&#125;，创建时间：&#123;2&#125;"</span>,values[<span class="number">0</span>].ToString(),values[<span class="number">1</span>].ToString(),values[<span class="number">2</span>].ToString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">object</span>[] ConvertBack(<span class="keyword">object</span> <span class="keyword">value</span>, Type[] targetTypes, <span class="keyword">object</span> parameter, System.Globalization.CultureInfo culture)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>多值转换器的在XAML中的申明和单值转换器一样，就不贴代码了，这里贴出如何使用多值转换器，重写ItemTemplate模板如下：<br>xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ListBox</span> <span class="attribute">ItemsSource</span>=<span class="value">"&#123;Binding ListUsers&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ListBox.ItemTemplate</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">DataTemplate</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">Grid</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">StackPanel</span> <span class="attribute">Orientation</span>=<span class="value">"Horizontal"</span> <span class="attribute">Height</span>=<span class="value">"30"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">Height</span>=<span class="value">"25"</span> <span class="attribute">Width</span>=<span class="value">"25"</span> <span class="attribute">Source</span>=<span class="value">"&#123;Binding Face,Converter=&#123;StaticResource imageConverter&#125;,ConverterParameter=1&#125;"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">TextBlock</span> <span class="attribute">Margin</span>=<span class="value">"5"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">TextBlock.Text</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="title">MultiBinding</span> <span class="attribute">Converter</span>=<span class="value">"&#123;StaticResource userConverter&#125;"</span> <span class="attribute">ConverterParameter</span>=<span class="value">"1"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="title">Binding</span> <span class="attribute">Path</span>=<span class="value">"Name"</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="title">Binding</span> <span class="attribute">Path</span>=<span class="value">"Age"</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="title">Binding</span> <span class="attribute">Path</span>=<span class="value">"CreateTime"</span>/&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="title">MultiBinding</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="title">TextBlock.Text</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">TextBlock</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">StackPanel</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">Grid</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">DataTemplate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">ListBox.ItemTemplate</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ListBox</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在listbox子项模板中创建了一个TextBlock 对象用于显示用户信息，此对象的Text属性中包含了一个 MultiBinding 多值绑定器，在这里对象内部可以绑定N个需要的数据，并在转换器内部进行处理。处理完成返回一个字符串对象给Text属性。<br>绑定完成后运行程序效果图：<br><img src="/images/public/13.jpg" alt="images"></p>
<p>示例程序 <a href="http://pan.baidu.com/s/1pKqfBRl" target="_blank" rel="external">点击下载</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="转换器介绍">转换器介绍</h1><p>在WPF中有随处可见的绑定，很多时候我们不想把的数据直接绑定给对象，而是需要对此数据经过加工再给他，这时候就需要转换器了。<br>比如用户性别，在数据实体中是bool值表示，直接绑定到UI控件上肯定客户是看不懂true/fa]]>
    </summary>
    
      <category term="WPF" scheme="http://www.knna.me/tags/WPF/"/>
    
      <category term="DotNet技术" scheme="http://www.knna.me/categories/DotNet%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[领域驱动模型（DDD）的理解与实例]]></title>
    <link href="http://www.knna.me/2015/10/26/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B%EF%BC%88DDD%EF%BC%89%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%9E%E4%BE%8B/"/>
    <id>http://www.knna.me/2015/10/26/领域驱动模型（DDD）的理解与实例/</id>
    <published>2015-10-26T04:48:58.000Z</published>
    <updated>2015-12-30T05:43:38.000Z</updated>
    <content type="html"><![CDATA[<h1 id="介绍">介绍</h1><p>领域驱动设计（全称：Domain Driven Design，简称：DDD）是我在《.NET 企业级应用架构设计》书中看到的设计理念。好像最近越来越火了，博客园上看到有人说欧美的国家不少软件公司已经普遍使用DDD进行软件开发。<br>最近我在网上也看了不少领域驱动设计的博文，学习了一些东西，但大多都是偏向理论的东西讲解，很少有代码实例说明的，因此这篇文章我会在代码的基础上进行介绍。</p>
<h2 id="区别">区别</h2><p>领域模型放在业务逻辑层中，因为它只实现了领域相关的业务。<br>现在很多开发人员是基于数据驱动的开发方式，也就是传统的多层开发架构，目前用的最多的。<br>而领域驱动设计不是基于数据驱动的开发方式，它可以说是基于需求（或者说业务）驱动的，它只关心每个领域对象中需要实现什么业务，与业务无关的，比如数据保存、查询这些，领域模型中一概不管。<br>所以领域驱动设计将开发人员区分开来，让业务开发人员不用触及底层数据库的相关代码，而数据库相关的开发人员也不用关心业务代码。<br>并且在领域驱动设计中，因为不关心底层数据库了，所以它可以更加轻松的开发业务和拓展业务。这是它的最大优势。<br>当然最大的优势也带来了最大的不足：在对领域模型进行数据持久化操作时是最难的，这时需要数据映射器将领域模型和数据库模型进行映射。</p>
<h2 id="代码比较">代码比较</h2><p>在领域模型中设计业务是非常直观和容易的，打个比方，传统模式中，我们要实现一个功能：小明打球，可能是这样写的：<br>cs<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">UserService</span><span class="class">.Play</span>(<span class="tag">XiaoMing</span>,<span class="tag">basketball</span>);</span><br></pre></td></tr></table></figure></p>
<p>而在领域驱动设计中，则是这样写的：<br>cs<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">XiaoMing</span><span class="class">.Play</span>(<span class="tag">basketball</span>);</span><br></pre></td></tr></table></figure></p>
<p>可以看出领域驱动设计代码明显更加直接，更具有可读性。</p>
<h1 id="领域理解">领域理解</h1><p>领域驱动设计：首先我们的关注点在领域，每个领域内聚的是领域相关的业务，比如我们上面的一个功能，用户打篮球，打篮球就是属于用户这个领域，再比如：吃饭，睡觉，上班等等都属于用户领域里面的，写了一个用户领域模型的代码来更直观理解一下。<br>cs<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 用户领域模型类</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span>:<span class="title">IEntity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//编号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> 用户打球</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">PlayBall</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Name + <span class="string">"在打球-下午7点"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> 吃饭</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Eat</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Name + <span class="string">"在吃饭-早上8点"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> 睡觉</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Sleep</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Name + <span class="string">"在睡觉-晚上10点"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> 工作</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Work</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Name + <span class="string">"在工作-上午9点"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="仓储层">仓储层</h1><p>如果领域驱动设计中没有数据持久化操作，那谁来完成这个任务呢？对了，就是仓储层。<br>记得在前面介绍EF相关文章中提过仓储模式，领域驱动设计一般都配合仓储模式搭建框架。在领域模型中是不包含任何数据持久化代码的，而数据的持久化操作就交给仓储层来完成了，他为每个领域模型创建了对应的数据映射器，可以为每一个领域模型进行持久化操作。如果没有看过前面EF相关文章的话，建议读一下，本文示例中的仓储层就是基于EF文中的示例，并进行了适当修改。</p>
<h1 id="服务层">服务层</h1><p>在领域驱动设计中，我们为每一个领域（比如用户，订单，商品…）都定义了对应的领域模型，在各自的领域模型中，实现了自身领域相关的细粒度业务方法。当然这些方法还不能提供给表现层直接调用。这就需要服务层来进行协调了，比如我们表现层有一个需求（用例）：获取用户一天的时间安排，这时表现层不会直接一个个调用用户领域领域模型中的吃饭，上班，打球，睡觉这些接口，而是利用服务层进行协调来向表现层提供一个粗粒度的用例接口，在用例接口中组合领域模型的细粒度业务。<br>比如以下服务层代码：<br>cs<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 用户服务类</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserServices</span>:<span class="title">BaseServices</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> 获取一天的安排</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetOneDay</span>(<span class="params">User user</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">//开始吃饭</span></span><br><span class="line">        <span class="keyword">string</span> msg = user.Eat();</span><br><span class="line">        sb.Append(msg);</span><br><span class="line">        sb.Append(<span class="string">"\r\n"</span>);</span><br><span class="line">        <span class="comment">//开始工作</span></span><br><span class="line">        msg = user.Work();</span><br><span class="line">        sb.Append(msg);</span><br><span class="line">        sb.Append(<span class="string">"\r\n"</span>);</span><br><span class="line">        <span class="comment">//开始打球</span></span><br><span class="line">        msg = user.PlayBall();</span><br><span class="line">        sb.Append(msg);</span><br><span class="line">        sb.Append(<span class="string">"\r\n"</span>);</span><br><span class="line">        <span class="comment">//开始睡觉</span></span><br><span class="line">        msg = user.Sleep();</span><br><span class="line">        sb.Append(msg);</span><br><span class="line">        sb.Append(<span class="string">"\r\n"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//一天结束</span></span><br><span class="line">        <span class="keyword">return</span> sb.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="表现层">表现层</h1><p>在服务层中已经为表现层每个用例提供了相应的接口，直接调用即可。代码如下：<br>cs<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Program</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(<span class="built_in">string</span>[] args)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//调用服务层的用例接口</span></span><br><span class="line">        User xiaoMing = <span class="keyword">new</span> User();</span><br><span class="line">        xiaoMing.Age = <span class="number">25</span>;</span><br><span class="line">        xiaoMing.ID = <span class="number">1</span>;</span><br><span class="line">        xiaoMing.Name = <span class="string">"小明"</span>;</span><br><span class="line">        UserServices xiaomingSvc = <span class="keyword">new</span> UserServices();</span><br><span class="line">        <span class="built_in">string</span> oneDay = xiaomingSvc.GetOneDay(xiaoMing);</span><br><span class="line">        Console.WriteLine(oneDay);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>显示结果：<br><img src="/images/public/11.jpg" alt="images"></p>
<p>这里就不调用仓储层进行持久化操作了，有关仓储层的操作和配置，可以看EF相关的文章。<br>领域模型我理解的不深入，不足之处，希望指正。<br>本文章示例代码 <a href="http://pan.baidu.com/s/1eQSbrou" target="_blank" rel="external">点击下载</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="介绍">介绍</h1><p>领域驱动设计（全称：Domain Driven Design，简称：DDD）是我在《.NET 企业级应用架构设计》书中看到的设计理念。好像最近越来越火了，博客园上看到有人说欧美的国家不少软件公司已经普遍使用DDD进行软件开发。<br>最]]>
    </summary>
    
      <category term="领域驱动设计" scheme="http://www.knna.me/tags/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="DotNet技术" scheme="http://www.knna.me/categories/DotNet%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用ORM框架(EF6)基于插件模式封装数据访问层（四）组件配置与切换]]></title>
    <link href="http://www.knna.me/2015/10/22/%E4%BD%BF%E7%94%A8ORM%E6%A1%86%E6%9E%B6(EF6)%E5%9F%BA%E4%BA%8E%E6%8F%92%E4%BB%B6%E6%A8%A1%E5%BC%8F%E5%B0%81%E8%A3%85%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%B1%82%EF%BC%88%E5%9B%9B%EF%BC%89%E7%BB%84%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%88%87%E6%8D%A2/"/>
    <id>http://www.knna.me/2015/10/22/使用ORM框架(EF6)基于插件模式封装数据访问层（四）组件配置与切换/</id>
    <published>2015-10-22T11:48:58.000Z</published>
    <updated>2015-12-30T05:43:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="组件配置">组件配置</h1><p>每个组件使用的数据库不同，在应程序的配置文件中的配置也各不相同。<br>注意：在使用其中一个数据库配置时，一定要将其他数据库的配置信息全部注释掉，否则在加载配置信息时会出错。在后面会详细介绍如何配置切换数据组件。</p>
<h2 id="数据库连接字符串">数据库连接字符串</h2><p>在配置文件中需要为数据库提供相应的链接字符串，当然也可以在代码中写死，一般我是配置的。<br>我贴出用到的这三个数据库连接字符串<br>xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--连接字符串配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">connectionStrings</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--MSSQL连接字符串--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">add</span> <span class="attribute">name</span>=<span class="value">"SqlConnectionString"</span> <span class="attribute">connectionString</span>=<span class="value">"Data Source=192.168.0.109; Database=APPFrameworkStudy;</span><br><span class="line">  User ID=sa; Password=123456; MultipleActiveResultSets=True"</span> <span class="attribute">providerName</span>=<span class="value">"System.Data.SqlClient"</span> /&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--Oracle连接字符串--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">add</span> <span class="attribute">name</span>=<span class="value">"OracleConnectionString"</span> <span class="attribute">providerName</span>=<span class="value">"Oracle.ManagedDataAccess.Client"</span> <span class="attribute">connectionString</span>=<span class="value">"Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.248)(PORT=1522)))</span><br><span class="line">       (CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=mbfe)));User Id=mbfeuser;Password=mbfeuser2014"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--MySQL连接字符串--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">add</span> <span class="attribute">name</span>=<span class="value">"MySqlConnectionString"</span> <span class="attribute">connectionString</span>=<span class="value">"Data Source=192.168.0.109;port=3306;Initial Catalog=APPFrameworkStudy;user id=root;password=root;"</span> <span class="attribute">providerName</span>=<span class="value">"MySql.Data.MySqlClient"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">connectionStrings</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="MSSQL数据库组件">MSSQL数据库组件</h2><p>SSQL因为是微软自家的产品，所以安装好EF后默认就有了数据库的链接驱动，并且配置默认就是MSSQL链接，只需修改配置文件中的链接字符串即可连接。</p>
<h2 id="Oracle数据库组件">Oracle数据库组件</h2><p>在.NET中想访问Oracle数据库，需要下载相关的驱动插件，在第一章创建项目时已经安装，可以回顾查看。安装好插件以后，需要打开配置文件进行配置，如下：<br>在配置文件的configuration根节点下创建四个子节点：configSections，entityFramework，system.data，runtime。<br>注意第一个configSections节点必须是根节点的第一个子节点，四个节点配置如下：<br>xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">configSections</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Oracle访问配置1--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">section</span> <span class="attribute">name</span>=<span class="value">"Oracle.ManagedDataAccess.Client"</span> <span class="attribute">type</span>=<span class="value">"OracleInternal.Common.ODPMSectionHandler, </span><br><span class="line">           Oracle.ManagedDataAccess, Version=4.121.2.0, Culture=neutral, PublicKeyToken=89b483f429c47342"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">section</span> <span class="attribute">name</span>=<span class="value">"entityFramework"</span> <span class="attribute">type</span>=<span class="value">"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, </span><br><span class="line">           EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"</span> <span class="attribute">requirePermission</span>=<span class="value">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">configSections</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Oracle访问配置2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">entityFramework</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">defaultConnectionFactory</span> <span class="attribute">type</span>=<span class="value">"System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">parameters</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">parameter</span> <span class="attribute">value</span>=<span class="value">"v11.1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">parameters</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">defaultConnectionFactory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">providers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">provider</span> <span class="attribute">invariantName</span>=<span class="value">"Oracle.ManagedDataAccess.Client"</span> <span class="attribute">type</span>=<span class="value">"Oracle.ManagedDataAccess.EntityFramework.EFOracleProviderServices, Oracle.ManagedDataAccess.EntityFramework, Version=6.121.2.0,         Culture=neutral, PublicKeyToken=89b483f429c47342"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">provider</span> <span class="attribute">invariantName</span>=<span class="value">"System.Data.SqlClient"</span> <span class="attribute">type</span>=<span class="value">"System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">providers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">entityFramework</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Oracle访问配置3--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">system.data</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">DbProviderFactories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">remove</span> <span class="attribute">invariant</span>=<span class="value">"Oracle.ManagedDataAccess.Client"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">add</span> <span class="attribute">name</span>=<span class="value">"ODP.NET, Managed Driver"</span> <span class="attribute">invariant</span>=<span class="value">"Oracle.ManagedDataAccess.Client"</span> <span class="attribute">description</span>=<span class="value">"Oracle Data Provider for .NET, Managed Driver"</span> <span class="attribute">type</span>=<span class="value">"Oracle.ManagedDataAccess.Client.OracleClientFactory, Oracle.ManagedDataAccess, Version=4.121.2.0, Culture=neutral, PublicKeyToken=89b483f429c47342"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">DbProviderFactories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">system.data</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Oracle访问配置4--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">runtime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">assemblyBinding</span> <span class="attribute">xmlns</span>=<span class="value">"urn:schemas-microsoft-com:asm.v1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependentAssembly</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">publisherPolicy</span> <span class="attribute">apply</span>=<span class="value">"no"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">assemblyIdentity</span> <span class="attribute">name</span>=<span class="value">"Oracle.ManagedDataAccess"</span> <span class="attribute">publicKeyToken</span>=<span class="value">"89b483f429c47342"</span> <span class="attribute">culture</span>=<span class="value">"neutral"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">bindingRedirect</span> <span class="attribute">oldVersion</span>=<span class="value">"4.121.0.0 - 4.65535.65535.65535"</span> <span class="attribute">newVersion</span>=<span class="value">"4.121.2.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependentAssembly</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">assemblyBinding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">runtime</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>驱动配置完成后，继续配置数据库的链接字符串即可。</p>
<h2 id="Mysql数据库组件">Mysql数据库组件</h2><p>和Oracle数据库一样，需要下载mysql数据库的支持驱动才能进行连接，在第一章创建项目时已经安装，可以回顾查看。安装好插件以后，需要打开配置文件进行相关配置。<br>在配置文件的根节点中创建entityFramework 节点，配置如下：<br>xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Mysql访问配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">entityFramework</span> <span class="attribute">codeConfigurationType</span>=<span class="value">"MySql.Data.Entity.MySqlEFConfiguration, MySql.Data.Entity.EF6"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">defaultConnectionFactory</span> <span class="attribute">type</span>=<span class="value">"System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">providers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">provider</span> <span class="attribute">invariantName</span>=<span class="value">"MySql.Data.MySqlClient"</span> <span class="attribute">type</span>=<span class="value">"MySql.Data.MySqlClient.MySqlProviderServices, MySql.Data.Entity.EF6"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">provider</span> <span class="attribute">invariantName</span>=<span class="value">"System.Data.SqlClient"</span> <span class="attribute">type</span>=<span class="value">"System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">providers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">entityFramework</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>mysql驱动配置完成后，继续配置数据库的链接字符串即可。</p>
<h1 id="组件切换">组件切换</h1><p>在服务层中创建了一个简单工厂，并提供方法用于返回当前配置的数据组件对象接口。在方法中返回数据组件有两种方式：引用创建和控制反转。<br>我使用的是控制反转方式，方法后半部分被注释的代码即引用创建方式的示例代码。</p>
<h2 id="引用创建">引用创建</h2><p>这是最简单也是最直观的方式，直接引用需要的组件，实例化组件的数据上下文对象，并转换为仓储接口即可。<br>美中不足就是需要引用组件项目，造成一点耦合，并且在切换数据组件时需要重新编译服务层代码。</p>
<h2 id="控制反转">控制反转</h2><p>使用控制反转方式可以将服务层与数据组件层完全解耦。<br>控制反转的大致原理就是读取配置文件中的信息，并根据映射关系使用反射来创建对象实例。挺简单的，我们自己都能写了对吧，不过微软已经封装的很好，我们就不用麻烦了。<br>首先打开nuget管理器下载微软的控制反转插件：unity插件和它的依赖插件CommonServiceLocator。<br>安装完成后打开配置文件，在根节点下创建configSections和unity两个子节点，节点配置如下：<br>xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="title">configSections</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据访问工厂组件控制反转配置1--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">section</span> <span class="attribute">name</span>=<span class="value">"unity"</span> <span class="attribute">type</span>=<span class="value">"Microsoft.Practices.Unity.Configuration.UnityConfigurationSection,Microsoft.Practices.Unity.Configuration"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">configSections</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--数据访问工厂组件控制反转配置2--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">unity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">containers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">container</span> <span class="attribute">name</span>=<span class="value">"defaultContainer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">types</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--Mysql数据访问组件--&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--&lt;register type="APPFrameworkStudy.Repository.IDataContext,APPFrameworkStudy.Repository"</span><br><span class="line">                mapTo="APPFrameworkStudy.MySql.MySqlDataContext,APPFrameworkStudy.MySql"&gt;&lt;/register&gt;--&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--Oracle数据访问组件--&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--&lt;register type="APPFrameworkStudy.Repository.IDataContext,APPFrameworkStudy.Repository"</span><br><span class="line">                         mapTo="APPFrameworkStudy.DAL.Oracle.OracleDataContext,APPFrameworkStudy.DAL.Oracle"&gt;&lt;/register&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--MSSQL数据访问组件--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">register</span> <span class="attribute">type</span>=<span class="value">"APPFrameworkStudy.Repository.IDataContext,APPFrameworkStudy.Repository"</span></span><br><span class="line"><span class="attribute">mapTo</span>=<span class="value">"APPFrameworkStudy.DAL.SqlServer.SqlServerDataContext,APPFrameworkStudy.DAL.SqlServer"</span>&gt;</span><span class="tag">&lt;/<span class="title">register</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">types</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">containers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">unity</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>我在unity节点中配置了三个数据访问组件，但只能启用一个，未启用的组件映射配置应该注释掉。比如现在当前的配置中，我启用了MSSQL数据访问组件的配置。<br>在数据组件工厂类中，使用控制反转时，unity读取配置文件，并找到IDataContext接口需要实例化的对象是APPFrameworkStudy.DAL.SqlServer.SqlServerDataContext。<br>随即开始创建此对象实例并转换为IDataContext接口返回给调用者。<br>注意在注册节点register 中，type属性表示需要返回的对象类型，紧跟着是这个对象类型所在的项目名称；mapto属性表示前者需要对应实例化的对象，同样紧跟着此对象类型所在的项目名称。<br>当我们需要对数据组件进行切换的时候，需要做一下几个操作：</p>
<blockquote>
<ul>
<li>打开配置文件并配置unity中的register 为需要的组件映射，将其他组件映射注释掉。</li>
<li>按照组件配置中的介绍，配置当前组件所需的信息，将其他数据库连接的配置信息注释掉。</li>
<li>配置链接字符串。</li>
<li>完成配置，下次启动程序就会调用新的数据组件。</li>
</ul>
</blockquote>
<h2 id="代码实现">代码实现</h2><p>数据组件工厂类DalFactory代码如下：<br>cs<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">/<span class="regexp">//</span> &lt;summary&gt;</span><br><span class="line"><span class="regexp">//</span><span class="regexp">/ 数据组件工厂类</span><br><span class="line">/</span><span class="regexp">//</span> &lt;<span class="regexp">/summary&gt;</span><br><span class="line">public class DalFactory</span><br><span class="line">&#123;</span><br><span class="line">    private static IDataContext _idataContext;</span><br><span class="line"></span><br><span class="line">    static DalFactory()</span><br><span class="line">    &#123;</span><br><span class="line">        /</span><span class="regexp">//</span><span class="regexp">/在这里切换底层数据库组件</span><br><span class="line"></span><br><span class="line">        /</span><span class="regexp">/方法一，使用微软的Unity工具和配置文件进行控制反转-依赖注入。</span><br><span class="line">        /</span><span class="regexp">/若出现初始化错误，可能是因为解耦后没有引用项目，DLL文件没有自动拷贝到执行目录</span><br><span class="line">        /</span><span class="regexp">/实例化容器类.</span><br><span class="line">        UnityContainer container = new UnityContainer();</span><br><span class="line">        /</span><span class="regexp">/绑定配置文件&lt;unity&gt;节点中的操作信息</span><br><span class="line">        UnityConfigurationSection section = (UnityConfigurationSection)ConfigurationManager.GetSection("unity");</span><br><span class="line">        section.Configure(container, "defaultContainer");</span><br><span class="line">        /</span><span class="regexp">/解析数据访问组件</span><br><span class="line">        _idataContext = container.Resolve&lt;IDataContext&gt;();</span><br><span class="line"></span><br><span class="line">        /</span><span class="regexp">/方法二，直接引用相关数据访问组件，直接实例化</span><br><span class="line">        /</span><span class="regexp">/MSSQL数据库</span><br><span class="line">        /</span><span class="regexp">/_idataContext = new SqlServerDataContext();</span><br><span class="line"></span><br><span class="line">        /</span><span class="regexp">/Oracle数据库</span><br><span class="line">        /</span><span class="regexp">/_idataContext = new OracleDataContext();</span><br><span class="line"></span><br><span class="line">        /</span><span class="regexp">/mysql数据库</span><br><span class="line">        /</span><span class="regexp">/_idataContext = new APPFrameworkStudy.MySql.MySqlDataContext();</span><br><span class="line"></span><br><span class="line">        /</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">/数据组件初始化完成/</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span></span><br><span class="line"></span><br><span class="line">        /<span class="regexp">/如果是DB First模式，则启用以下代码进行模型匹配。</span><br><span class="line">        _idataContext.DBFirstCheck();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /</span><span class="regexp">//</span> &lt;summary&gt;</span><br><span class="line">    <span class="regexp">//</span><span class="regexp">/ 数据访问对象</span><br><span class="line">    /</span><span class="regexp">//</span> &lt;<span class="regexp">/summary&gt;</span><br><span class="line">    public static IDataContext DataContext</span><br><span class="line">    &#123;</span><br><span class="line">        get &#123; return _idataContext; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="DB_First和Code_First切换">DB First和Code First切换</h1><p>在我们文章的示例中一直用的是Code First模式，即相关的模型代码发生改变，就会在运行时自动重建数据库。<br>DB First则是以已有数据库为准，程序会在运行时检查模型代码发现的改变，若改变，则提示异常，不会修改数据库。但是在数据库不存在的情况下会直接创建。<br>DB First模式下的检查代码在数据访问组件中重写基类DBFirstCheck抽象方法实现，代码如下：<br>cs<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> MSSQL数据访问组件对象</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SqlServerDataContext</span> : <span class="title">BaseDataContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> 数据库优先模式下的检查程序</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DBFirstCheck</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//采用DB First模式开发，则启用这几行代码，他会检查模型的变化并与数据库结构匹配，数据库不存在则创建。</span></span><br><span class="line">        <span class="comment">//已存在但不匹配，则会提示异常。而不像code first模式中不匹配直接删除数据库重建。</span></span><br><span class="line">        <span class="comment">//这里可以使用任意的领域模型类型作为泛型参数，不管用哪个类型都会匹配整个模型</span></span><br><span class="line"></span><br><span class="line">        System.Data.Entity.CreateDatabaseIfNotExists&lt;OrderDataMapper&gt; dbset = <span class="keyword">new</span> System.Data.Entity.CreateDatabaseIfNotExists&lt;OrderDataMapper&gt;();</span><br><span class="line">        OrderDataMapper mapper = <span class="keyword">default</span>(OrderDataMapper);</span><br><span class="line">        dbset.InitializeDatabase(mapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> IDataMapper&lt;T&gt; GetDataMapper&lt;T&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//每次调用一个方法都实例化一个数据访问对象，因为EF数据访问对象不是为长时间使用准备的</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span>(T) == <span class="keyword">typeof</span>(Order))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (IDataMapper&lt;T&gt;)<span class="keyword">new</span> OrderDataMapper();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params"><span class="keyword">typeof</span>(T</span>) </span>== <span class="keyword">typeof</span>(Product))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (IDataMapper&lt;T&gt;)<span class="keyword">new</span> ProductDataMapper();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//暂不支持其他类型</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"unsupported type"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在需要进入DB First开发模式时，只需在数据组件工厂类提供的方法中调用DBFirstCheck即可，这时就会检查代码模型与数据库模型是否匹配。<br>调用实现代码示例可以查看上面贴出的DalFactory代码。</p>
<h1 id="结束">结束</h1><p>《使用ORM框架(EF6)基于插件模式封装数据访问层》系列文章结束了，其中不免一些错误希望指正。<br>还有很多描述和设计不全面的地方，可以下载源码研究。<br>后续会出一个关于领域驱动模型设计的文章，介绍一下我对此模型的理解。<br>本系列源码可以点击 <a href="http://pan.baidu.com/s/1i3ZwE5v" target="_blank" rel="external">这里下载</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="组件配置">组件配置</h1><p>每个组件使用的数据库不同，在应程序的配置文件中的配置也各不相同。<br>注意：在使用其中一个数据库配置时，一定要将其他数据库的配置信息全部注释掉，否则在加载配置信息时会出错。在后面会详细介绍如何配置切换数据组件。</p>
<h2]]>
    </summary>
    
      <category term="EF" scheme="http://www.knna.me/tags/EF/"/>
    
      <category term="DotNet技术" scheme="http://www.knna.me/categories/DotNet%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用ORM框架(EF6)基于插件模式封装数据访问层（三）主外键和组件调用]]></title>
    <link href="http://www.knna.me/2015/10/22/%E4%BD%BF%E7%94%A8ORM%E6%A1%86%E6%9E%B6(EF6)%E5%9F%BA%E4%BA%8E%E6%8F%92%E4%BB%B6%E6%A8%A1%E5%BC%8F%E5%B0%81%E8%A3%85%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%B1%82%EF%BC%88%E4%B8%89%EF%BC%89%E4%B8%BB%E5%A4%96%E9%94%AE%E5%92%8C%E7%BB%84%E4%BB%B6%E8%B0%83%E7%94%A8/"/>
    <id>http://www.knna.me/2015/10/22/使用ORM框架(EF6)基于插件模式封装数据访问层（三）主外键和组件调用/</id>
    <published>2015-10-22T04:48:58.000Z</published>
    <updated>2015-12-30T05:41:38.000Z</updated>
    <content type="html"><![CDATA[<h1 id="开始">开始</h1><p>本章介绍以下几个主题：</p>
<blockquote>
<ul>
<li>主外键关系配置</li>
<li>调用数据组件</li>
<li>查询排序</li>
<li>查询指定字段</li>
<li>获取外键数据</li>
</ul>
</blockquote>
<h1 id="主外键关系配置">主外键关系配置</h1><p>开发中的各个对象之间少不了主外键关系，在EF中，配置表之间的关系还是比较简单的。<br>比如示例代码中有两个领域模型，Order，Product，其中order表示订单，product表示每个订单中的若干个商品。因此需要将这两个对象配置为主外键关系。<br>配置方法：<br>打开product模型的映射限定类：ProductMapping，在init()方法中追加以下代码：<br>cs<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//映射Orders表和products表的主外键关系</span></span><br><span class="line"><span class="keyword">this</span>.HasRequired(p =&gt; p.Order).WithMany(o =&gt; o.OrderItems).<span class="built_in">Map</span>(o =&gt; o.MapKey(<span class="string">"OrderID"</span>));</span><br></pre></td></tr></table></figure></p>
<p>理解一下这行代码</p>
<blockquote>
<ul>
<li>首先HasRequired方法传入lambda表达式，表达式中提取了product对象的Order属性作为导航属性，这个属性被当做外键，并且是不可为空。</li>
<li>第二个WithMany方法传入lambda表达式，表达式中提取了order对象的OrderItems属性作为导航属性，属性包含了product对象的集合。</li>
<li>最后的Map方法传入lambda表达式，在表达式中限定了product对象的外键order保存到数据库时的字段名：OrderID</li>
</ul>
</blockquote>
<p>product模型的映射限定类完整代码：<br>cs<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/// <span class="xml"><span class="tag">&lt;<span class="title">summary</span>&gt;</span></span></span></span></span><br><span class="line"><span class="comment"><span class="markdown">/// 商品领域模型的映射限定类</span></span></span><br><span class="line"><span class="comment"><span class="markdown">/// <span class="xml"><span class="tag">&lt;/<span class="title">summary</span>&gt;</span></span></span></span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ProductMapping</span> : <span class="title">BaseDomainMapping</span>&lt;<span class="title">Product</span>&gt;</span><br><span class="line"></span>&#123;</span><br><span class="line">    public override <span class="keyword">void</span> Init()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.ToTable(<span class="string">"Products"</span>);</span><br><span class="line">        <span class="keyword">this</span>.HasKey(l =&gt; l.ID);</span><br><span class="line">        <span class="keyword">this</span>.Property(l =&gt; l.Name).HasMaxLength(<span class="number">100</span>).IsRequired();</span><br><span class="line">        <span class="comment">//映射Orders表和products表的主外键关系</span></span><br><span class="line">        <span class="keyword">this</span>.HasRequired(p =&gt; p.Order).WithMany(o =&gt; o.OrderItems).<span class="built_in">Map</span>(o =&gt; o.MapKey(<span class="string">"OrderID"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在配置完成后，可以在下图看到生成的数据库中的两个表orders、products中已经形成了主外键关系，可以达到联级删除效果，此时删除orders表中的任意数据，关联的products表相关数据自动删除。<br><img src="/images/public/10.jpg" alt="images"></p>
<h1 id="调用数据组件">调用数据组件</h1><p>数据组件的调用发生在服务层(services)中，每个领域模型在服务层中对应一个服务类，每个服务类继承了一个服务基类，基类中只有一个属性DataContext，提供对数据组件接口的访问。<br>服务基类BaseServices代码如下：<br>cs<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 领域模型服务基类</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseServices</span></span><br><span class="line">&#123;</span><br><span class="line">    IDataContext _context;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseServices</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        _context = DalFactory.DataContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> 执行数据持久化操作的数据上下文</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> IDataContext DataContext &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> _context; &#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>order领域模型的服务类代码如下：<br>cs<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> 服务提供粗粒度接口供表现层调用</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderServices</span> : <span class="title">BaseServices</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> 生成订单</span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;returns&gt;</span><span class="xmlDocTag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Order <span class="title">CreateOrder</span>(<span class="params">Order order</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="comment">//初始化订单信息</span></span><br><span class="line">            order.InitBeforeCreateOrder();</span><br><span class="line">            <span class="comment">//保存订单</span></span><br><span class="line">            <span class="keyword">this</span>.DataContext.Create&lt;Order&gt;(order);</span><br><span class="line">            <span class="keyword">return</span> order;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">DeleteOrder</span>(<span class="params">Order order</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.DataContext.Delete&lt;Order&gt;(order);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">UpdateOrder</span>(<span class="params">Order order</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.DataContext.Update&lt;Order&gt;(order);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> 获取今日订单</span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;returns&gt;</span><span class="xmlDocTag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IList&lt;Order&gt; <span class="title">GetTodayOrders</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="comment">//查询条件 今日所有订单</span></span><br><span class="line">            Expression&lt;Func&lt;Order, <span class="keyword">bool</span>&gt;&gt; <span class="keyword">where</span> = order =&gt; order.CreateTime &gt; DateTime.Today;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.DataContext.GetByCriteria&lt;Order&gt;(<span class="keyword">where</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> 获取所有订单并按时间倒叙排序</span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;returns&gt;</span><span class="xmlDocTag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IList&lt;Order&gt; <span class="title">GetAllOrdersByOrder</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            IOrderAndInclude&lt;Order&gt; query = <span class="keyword">new</span> OrderAndInclude&lt;Order&gt;(<span class="keyword">this</span>.DataContext.GetQueryable&lt;Order&gt;());</span><br><span class="line">            <span class="comment">//按照时间倒序排序，并且贪婪模式获取外键数据</span></span><br><span class="line">            query.Desc&lt;DateTime&gt;(o =&gt; o.CreateTime).Include(o =&gt; o.OrderItems);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.DataContext.GetAll&lt;Order&gt;(query.Queryable);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ............后续还有一些代码没有贴出，可以在文章后面下载示例代码查看。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="服务层调用数据组件">服务层调用数据组件</h2><p>比如现在order的服务层中有个创建订单的方法处理流程如下：</p>
<blockquote>
<ul>
<li>初始化订单：由order领域模型实现了此方法，直接调用，其中实现了计算总额、创建时间、主键。</li>
<li>提交订单到数据库：调用服务基类中提供的DataContext.Create方法将订单保存到数据库中。</li>
<li>回创建的订单。</li>
</ul>
</blockquote>
<p>具体实现代码如下：<br>cs<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 生成订单</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">Order</span> CreateOrder(<span class="keyword">Order</span> <span class="keyword">order</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化订单信息</span></span><br><span class="line">    <span class="keyword">order</span><span class="built_in">.</span>InitBeforeCreateOrder();</span><br><span class="line">    <span class="comment">//保存订单</span></span><br><span class="line">    this<span class="built_in">.</span>DataContext<span class="built_in">.</span>Create&lt;<span class="keyword">Order</span>&gt;(<span class="keyword">order</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">order</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>order领域模型实现代码：<br>cs<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 订单领域模型，这里提供最小粒度的业务处理，不涉及数据访问，供服务层调用</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 服务层根据用例将小粒度业务组合为粗粒度服务供表现层调用</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Order</span> : <span class="title">IEntity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Number &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">decimal</span> ShipAmount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime CreateTime &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Product&gt; _orderItems = <span class="keyword">new</span> List&lt;Product&gt;();</span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> 定单明细</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; OrderItems</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _orderItems; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _orderItems = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> 计算定单金额</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;returns&gt;</span><span class="xmlDocTag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">decimal</span> <span class="title">GetOrderAmount</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">decimal</span> amount = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//计算商品金额</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> OrderItems)</span><br><span class="line">        &#123;</span><br><span class="line">            amount += item.GetAmount();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//加上运费</span></span><br><span class="line">        amount += ShipAmount;</span><br><span class="line">        <span class="keyword">return</span> amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> 在创建订单前初始化</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InitBeforeCreateOrder</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        ShipAmount = GetOrderAmount();</span><br><span class="line">        CreateTime = DateTime.Now;</span><br><span class="line">        Number = Guid.NewGuid().ToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ID:"</span> + ID + <span class="string">"，订单号："</span> + Number + <span class="string">"，订单总额:"</span> + ShipAmount + <span class="string">"，CreateTime:"</span> + CreateTime.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其他数据组件的方法调用类似，就不多做介绍了，可以下载示例代码查看。</p>
<h1 id="查询排序">查询排序</h1><h2 id="排序和外键数据工具类">排序和外键数据工具类</h2><p>当我们在调用查询方法的时候，可能需要对查询结果进行排序，或者获取主数据中的外键数据；所以封装了一个工具类，工具类提供方法操作LINQ查询对象进行排序和外键数据的获取，放在Common工具组件中。<br>OrderAndInclude工具类：为查询排序或者为查询填充外键数据，填充外键数据模式为贪婪模式，关于外键数据的拉取模式在后面会介绍。<br>到这里EF的优势已经显示出来了，数据操作都不需要任何T-SQL语句，只需要lambda表达式即可，EF会将lambda表达式的含义转换为SQL语句进行数据库操作。<br>接口中的所有方法参数都是lambda表达式，用于提取一个属性，以表明是哪个字段需要排序或者哪个字段需要填充外键数据。<br>在实例化此类型时，需要向构造函数传入IQueryable 即linq查询对象，后续方法直接在此linq查询对象上做操作。然后通过Queryable 属性获取已附加了操作的Linq查询对象，OrderAndInclude代码：<br>cs<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">/// <span class="tag">&lt;<span class="title">summary</span>&gt;</span></span><br><span class="line">/// Linq架构里对集合排序和贪婪获取外键数据</span><br><span class="line">/// <span class="tag">&lt;/<span class="title">summary</span>&gt;</span></span><br><span class="line">/// <span class="tag">&lt;<span class="title">typeparam</span> <span class="attribute">name</span>=<span class="value">"T"</span>&gt;</span><span class="tag">&lt;/<span class="title">typeparam</span>&gt;</span></span><br><span class="line">public class OrderAndInclude<span class="tag">&lt;<span class="title">T</span>&gt;</span> : IOrderAndInclude<span class="tag">&lt;<span class="title">T</span>&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    private IQueryable<span class="tag">&lt;<span class="title">T</span>&gt;</span> _queryable;</span><br><span class="line"></span><br><span class="line">    /// <span class="tag">&lt;<span class="title">summary</span>&gt;</span></span><br><span class="line">    /// 排序后的结果集</span><br><span class="line">    /// <span class="tag">&lt;/<span class="title">summary</span>&gt;</span></span><br><span class="line">    /// <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"enumerable"</span>&gt;</span><span class="tag">&lt;/<span class="title">param</span>&gt;</span></span><br><span class="line">    public OrderAndInclude(IQueryable<span class="tag">&lt;<span class="title">T</span>&gt;</span> enumerable)</span><br><span class="line">    &#123;</span><br><span class="line">        _queryable = enumerable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// <span class="tag">&lt;<span class="title">summary</span>&gt;</span></span><br><span class="line">    /// 排序之后的结果集</span><br><span class="line">    /// <span class="tag">&lt;/<span class="title">summary</span>&gt;</span></span><br><span class="line">    public IQueryable<span class="tag">&lt;<span class="title">T</span>&gt;</span> Queryable</span><br><span class="line">    &#123;</span><br><span class="line">        get &#123; return _queryable; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /// <span class="tag">&lt;<span class="title">summary</span>&gt;</span></span><br><span class="line">    /// 递增</span><br><span class="line">    /// <span class="tag">&lt;/<span class="title">summary</span>&gt;</span></span><br><span class="line">    /// <span class="tag">&lt;<span class="title">typeparam</span> <span class="attribute">name</span>=<span class="value">"TKey"</span>&gt;</span><span class="tag">&lt;/<span class="title">typeparam</span>&gt;</span></span><br><span class="line">    /// <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"keySelector"</span>&gt;</span><span class="tag">&lt;/<span class="title">param</span>&gt;</span></span><br><span class="line">    /// <span class="tag">&lt;<span class="title">returns</span>&gt;</span><span class="tag">&lt;/<span class="title">returns</span>&gt;</span></span><br><span class="line">    public IOrderAndInclude<span class="tag">&lt;<span class="title">T</span>&gt;</span> Asc<span class="tag">&lt;<span class="title">TKey</span>&gt;</span>(Expression<span class="tag">&lt;<span class="title">Func</span>&lt;<span class="attribute">T</span>, <span class="attribute">TKey</span>&gt;</span>&gt; keySelector)</span><br><span class="line">    &#123;</span><br><span class="line">        _queryable = (_queryable as IOrderedQueryable<span class="tag">&lt;<span class="title">T</span>&gt;</span>)</span><br><span class="line">            .OrderBy(keySelector);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line">    /// <span class="tag">&lt;<span class="title">summary</span>&gt;</span></span><br><span class="line">    /// 然后递增</span><br><span class="line">    /// <span class="tag">&lt;/<span class="title">summary</span>&gt;</span></span><br><span class="line">    /// <span class="tag">&lt;<span class="title">typeparam</span> <span class="attribute">name</span>=<span class="value">"TKey"</span>&gt;</span><span class="tag">&lt;/<span class="title">typeparam</span>&gt;</span></span><br><span class="line">    /// <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"keySelector"</span>&gt;</span><span class="tag">&lt;/<span class="title">param</span>&gt;</span></span><br><span class="line">    /// <span class="tag">&lt;<span class="title">returns</span>&gt;</span><span class="tag">&lt;/<span class="title">returns</span>&gt;</span></span><br><span class="line">    public IOrderAndInclude<span class="tag">&lt;<span class="title">T</span>&gt;</span> ThenAsc<span class="tag">&lt;<span class="title">TKey</span>&gt;</span>(Expression<span class="tag">&lt;<span class="title">Func</span>&lt;<span class="attribute">T</span>, <span class="attribute">TKey</span>&gt;</span>&gt; keySelector)</span><br><span class="line">    &#123;</span><br><span class="line">        _queryable = (_queryable as IOrderedQueryable<span class="tag">&lt;<span class="title">T</span>&gt;</span>)</span><br><span class="line">            .ThenBy(keySelector);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line">    /// <span class="tag">&lt;<span class="title">summary</span>&gt;</span></span><br><span class="line">    /// 递减</span><br><span class="line">    /// <span class="tag">&lt;/<span class="title">summary</span>&gt;</span></span><br><span class="line">    /// <span class="tag">&lt;<span class="title">typeparam</span> <span class="attribute">name</span>=<span class="value">"TKey"</span>&gt;</span><span class="tag">&lt;/<span class="title">typeparam</span>&gt;</span></span><br><span class="line">    /// <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"keySelector"</span>&gt;</span><span class="tag">&lt;/<span class="title">param</span>&gt;</span></span><br><span class="line">    /// <span class="tag">&lt;<span class="title">returns</span>&gt;</span><span class="tag">&lt;/<span class="title">returns</span>&gt;</span></span><br><span class="line">    public IOrderAndInclude<span class="tag">&lt;<span class="title">T</span>&gt;</span> Desc<span class="tag">&lt;<span class="title">TKey</span>&gt;</span>(Expression<span class="tag">&lt;<span class="title">Func</span>&lt;<span class="attribute">T</span>, <span class="attribute">TKey</span>&gt;</span>&gt; keySelector)</span><br><span class="line">    &#123;</span><br><span class="line">        _queryable = _queryable</span><br><span class="line">            .OrderByDescending(keySelector);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line">    /// <span class="tag">&lt;<span class="title">summary</span>&gt;</span></span><br><span class="line">    /// 然后递减</span><br><span class="line">    /// <span class="tag">&lt;/<span class="title">summary</span>&gt;</span></span><br><span class="line">    /// <span class="tag">&lt;<span class="title">typeparam</span> <span class="attribute">name</span>=<span class="value">"TKey"</span>&gt;</span><span class="tag">&lt;/<span class="title">typeparam</span>&gt;</span></span><br><span class="line">    /// <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"keySelector"</span>&gt;</span><span class="tag">&lt;/<span class="title">param</span>&gt;</span></span><br><span class="line">    /// <span class="tag">&lt;<span class="title">returns</span>&gt;</span><span class="tag">&lt;/<span class="title">returns</span>&gt;</span></span><br><span class="line">    public IOrderAndInclude<span class="tag">&lt;<span class="title">T</span>&gt;</span> ThenDesc<span class="tag">&lt;<span class="title">TKey</span>&gt;</span>(Expression<span class="tag">&lt;<span class="title">Func</span>&lt;<span class="attribute">T</span>, <span class="attribute">TKey</span>&gt;</span>&gt; keySelector)</span><br><span class="line">    &#123;</span><br><span class="line">        _queryable = (_queryable as IOrderedQueryable<span class="tag">&lt;<span class="title">T</span>&gt;</span>)</span><br><span class="line">            .ThenByDescending(keySelector);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// <span class="tag">&lt;<span class="title">summary</span>&gt;</span></span><br><span class="line">    /// 贪婪获取外键数据</span><br><span class="line">    /// <span class="tag">&lt;/<span class="title">summary</span>&gt;</span></span><br><span class="line">    /// <span class="tag">&lt;<span class="title">typeparam</span> <span class="attribute">name</span>=<span class="value">"TKey"</span>&gt;</span><span class="tag">&lt;/<span class="title">typeparam</span>&gt;</span></span><br><span class="line">    /// <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"keySelector"</span>&gt;</span><span class="tag">&lt;/<span class="title">param</span>&gt;</span></span><br><span class="line">    /// <span class="tag">&lt;<span class="title">returns</span>&gt;</span><span class="tag">&lt;/<span class="title">returns</span>&gt;</span></span><br><span class="line">    public IOrderAndInclude<span class="tag">&lt;<span class="title">T</span>&gt;</span> Include<span class="tag">&lt;<span class="title">TKey</span>&gt;</span>(Expression<span class="tag">&lt;<span class="title">Func</span>&lt;<span class="attribute">T</span>, <span class="attribute">TKey</span>&gt;</span>&gt; keySelector)</span><br><span class="line">    &#123;</span><br><span class="line">        _queryable = _queryable.Include(keySelector);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="查询排序-1">查询排序</h2><p>需要查询最近订单详情时，需要将订单按照时间顺序倒序排序，这时可以按照以下步骤操作：</p>
<blockquote>
<ul>
<li>调用数据访问组件的GetQueryable方法获取linq查询对象</li>
<li>实例化OrderAndInclude对象实例，并将linq查询对象注入</li>
<li>使用OrderAndInclude对象实例中的方法进行相应的排序操作</li>
</ul>
</blockquote>
<p>比如这个示例：<br>cs<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 获取所有订单并按时间倒叙排序</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;returns&gt;</span><span class="xmlDocTag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IList&lt;Order&gt; <span class="title">GetAllOrdersByOrder</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    IOrderAndInclude&lt;Order&gt; query = <span class="keyword">new</span> OrderAndInclude&lt;Order&gt;(<span class="keyword">this</span>.DataContext.GetQueryable&lt;Order&gt;());</span><br><span class="line">    <span class="comment">//按照时间倒序排序</span></span><br><span class="line">    query.Desc&lt;DateTime&gt;(o =&gt; o.CreateTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.DataContext.GetAll&lt;Order&gt;(query.Queryable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="查询指定字段">查询指定字段</h2><p>在封装的查询方法中，每个查询方法都有个Expression&gt; selector参数的重载，用于自定义字段查询。<br>在参数的lambda表达式中，提取了一个dynamic动态类型，表示可以返回任何东西，我们在使用它的时候，返回了一个匿名类型。<br>其中的属性就是我们自定义查询的字段，查询的结果也是此匿名类型的集合，这时我们可以使用一个转换器进行转换即可，这个转换器的原理就是利用反射获取动态类型属性，并将属性赋值给指定对象中的属性。<br>一个获取order表ID，Number字段的查询示例：<br>cs<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 获取指定字段数据</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;returns&gt;</span><span class="xmlDocTag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IList&lt;Order&gt; <span class="title">GetAllExcept</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">1</span>, size = <span class="number">10</span>, total;</span><br><span class="line">    IList&lt;Order&gt; lst = <span class="keyword">this</span>.DataContext.GetPageByCriteria&lt;Order&gt;(index, size, <span class="keyword">out</span> total, (o =&gt; o.ID &gt; <span class="number">5</span>), (o =&gt; <span class="keyword">new</span> &#123;o.ID, o.CreateTime &#125;));</span><br><span class="line">    <span class="keyword">return</span> lst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>数据访问层实现代码：<br>cs<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> IList&lt;T&gt; <span class="title">GetPageByCriteria</span>(<span class="params"><span class="keyword">int</span> pageIndex, <span class="keyword">int</span> pageSize, <span class="keyword">out</span> <span class="keyword">int</span> total, Expression&lt;Func&lt;T, <span class="keyword">bool</span>&gt;&gt; <span class="keyword">where</span>, Expression&lt;Func&lt;T, <span class="keyword">dynamic</span>&gt;&gt; selector</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pageIndex &lt;= <span class="number">0</span> || pageSize &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    total = <span class="keyword">this</span>.Entitys.AsNoTracking().Where(<span class="keyword">where</span>).Count();</span><br><span class="line">    IList&lt;<span class="keyword">dynamic</span>&gt; lst = <span class="keyword">this</span>.Entitys.AsNoTracking().Where(<span class="keyword">where</span>).OrderBy(t =&gt; t.ID)</span><br><span class="line">            .Skip((pageIndex - <span class="number">1</span>) * pageSize)</span><br><span class="line">            .Take(pageSize).Select(selector).ToList();</span><br><span class="line">    <span class="comment">//将动态类型集合通过反射技术转换为T集合</span></span><br><span class="line">    <span class="keyword">return</span> DataConvert.DynamicToList&lt;T&gt;(lst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="获取外键数据">获取外键数据</h2><h3 id="外键数据获取模式">外键数据获取模式</h3><p>在EF中，获取外键有三种模式：</p>
<blockquote>
<ul>
<li>贪婪加载：在linq查询对象直接调用Include方法传入需要加载的外键属性即可，这个模式属于一劳永逸，只查询一次数据库，就可以加载所有外键数据。</li>
<li>延迟加载：首先加载主数据，在用到外键数据的时候才会继续向数据库查询外键数据，优点就是如果主数据中的外键值偶尔用到，用这个方法很好；缺点是如果经常使用外键数据就会导致每使用一次外键数据就加载一次外键数据。当然已经加载过的不会再去加载。</li>
<li>显示加载：和延迟加载类似，先查询主数据，再查询外键数据，具体差异没有细致了解，有兴趣可以自己百度</li>
</ul>
</blockquote>
<p>在我们封装的示例程序中，外键获取方式使用的贪婪加载，可以根据需要增加其他加载模式。</p>
<h3 id="贪婪模式获取">贪婪模式获取</h3><p>获取外键数据的操作和排序操作类似。将上一个示例代码修改一下，在此排序的基础上获取外键数据。<br>cs<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 获取所有订单并按时间倒叙排序</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line">public IList&lt;<span class="keyword">Order</span>&gt; GetAllOrdersByOrder()</span><br><span class="line">&#123;</span><br><span class="line">    IOrderAndInclude&lt;<span class="keyword">Order</span>&gt; <span class="keyword">query</span> = new OrderAndInclude&lt;<span class="keyword">Order</span>&gt;(this.DataContext.GetQueryable&lt;<span class="keyword">Order</span>&gt;());</span><br><span class="line">    <span class="comment">//按照时间倒序排序，并且贪婪模式获取外键数据</span></span><br><span class="line">    <span class="keyword">query</span>.<span class="keyword">Desc</span>&lt;DateTime&gt;(o =&gt; o.CreateTime).<span class="keyword">Include</span>(o =&gt; o.OrderItems);</span><br><span class="line">    <span class="keyword">return</span> this.DataContext.GetAll&lt;<span class="keyword">Order</span>&gt;(<span class="keyword">query</span>.Queryable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>数据组件的其他方法调用也大致如此。</p>
<h1 id="下一节">下一节</h1><p>下一节介绍如何在配置文件中配置和切换数据组件。<br>源码可以点击 <a href="http://pan.baidu.com/s/1i3ZwE5v" target="_blank" rel="external">这里下载</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="开始">开始</h1><p>本章介绍以下几个主题：</p>
<blockquote>
<ul>
<li>主外键关系配置</li>
<li>调用数据组件</li>
<li>查询排序</li>
<li>查询指定字段</li>
<li>获取外键数据</li>
</ul>]]>
    </summary>
    
      <category term="EF" scheme="http://www.knna.me/tags/EF/"/>
    
      <category term="DotNet技术" scheme="http://www.knna.me/categories/DotNet%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用ORM框架(EF6)基于插件模式封装数据访问层（二）数据访问组件]]></title>
    <link href="http://www.knna.me/2015/10/21/%E4%BD%BF%E7%94%A8ORM%E6%A1%86%E6%9E%B6(EF6)%E5%9F%BA%E4%BA%8E%E6%8F%92%E4%BB%B6%E6%A8%A1%E5%BC%8F%E5%B0%81%E8%A3%85%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%B1%82%EF%BC%88%E4%BA%8C%EF%BC%89%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E7%BB%84%E4%BB%B6/"/>
    <id>http://www.knna.me/2015/10/21/使用ORM框架(EF6)基于插件模式封装数据访问层（二）数据访问组件/</id>
    <published>2015-10-21T10:48:58.000Z</published>
    <updated>2015-12-30T05:40:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="数据访问组件">数据访问组件</h1><p>第一章大致介绍了使用插件模式实现数据访问层的好处，可以完全将业务层和数据访问层解耦，达到面向接口编程的目的。<br>EF属于配置型框架，当我们需要切换底层数据访问层实现时，无需编译程序，只需在程序配置文件中进行配置即可，非常灵活方便。切换底层数据访问组件一般有两个目的：</p>
<blockquote>
<ul>
<li>向另一种数据库切换的时候，新的组件中实现了对另一个数据库的访问。</li>
<li>因为各种原因需要重新实现现有组件并替换的时候。</li>
</ul>
</blockquote>
<p>在示例程序中开发了三个数据库组件，切换组件的目的就是为了使用不同的数据库。</p>
<h1 id="SqlServer数据库组件">SqlServer数据库组件</h1><p>MSSQL（Microsoft SqlServer）是EF原生支持的，不用下载任何驱动即可访问，很方便。在搭建项目框架时我们已经为组件安装了EF插件，现在直接开始编写代码。</p>
<h2 id="数据访问组件实现">数据访问组件实现</h2><p>首先创建 SqlServerDataContext 数据访问组件对象，它继承了上一节介绍的BaseDataContext抽象基类，在Repository项目中。<br>重写了GetDataMapper方法，其中实现了每个业务逻辑层的领域模型和数据映射器的对应关系，方法根据不同的类型，返回此类型对应的数据映射器接口。<br>其实也可以使用控制反转的方式来映射每个类型，并且使数据访问组件不再引用业务逻辑层中的领域模型，不过由于这里的类型与它相对应的数据映射器是不会改变的，也就没必要使用控制反转了。而且他们的引用也仅限于使用了类名，是相对非常松散的耦合。不会为以后的拓展带来麻烦。<br>SqlServerDataContext 代码：<br>cs<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> MSSQL数据访问组件对象</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SqlServerDataContext</span> : <span class="title">BaseDataContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> IDataMapper&lt;T&gt; GetDataMapper&lt;T&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//每次调用一个方法都实例化一个数据访问对象，因为EF数据访问对象不是为长时间使用准备的</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span>(T) == <span class="keyword">typeof</span>(Order))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (IDataMapper&lt;T&gt;)<span class="keyword">new</span> OrderDataMapper();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//暂不支持其他类型</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"unsupported type"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="领域模型映射限制">领域模型映射限制</h2><p>在示例中，每个领域模型直接通过数据映射器对应到数据库中，如果不加限制的话，可能生成的数据库就不是我们预期想要的了。<br>比如Order领域模型类中，有主键ID-int，有单号Number-string，在没有为他们的属性进行限定的时候，生成出来的ID字段不是主键，并且Number的类型也是个非常大的字符型。<br>所以我在领域模型中创建了映射限定类来限定每个领域模型中需要映射到数据库的属性或主键。<br>首先创建了一个基类：BaseDomainMapping<br>代码如下：<br>cs<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"> <span class="comment">/// 领域模型映射限定基类</span></span><br><span class="line"> <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"> <span class="comment">/// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;</span></span><br><span class="line"> <span class="keyword">public</span> abstract <span class="keyword">class</span> BaseDomainMapping&lt;T&gt; : EntityTypeConfiguration&lt;T&gt;</span><br><span class="line">where T : <span class="keyword">class</span>, <span class="keyword">new</span>()</span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">BaseDomainMapping</span><span class="params">()</span></span><br><span class="line">     </span>&#123;</span><br><span class="line">         Init();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">     <span class="comment">/// 初始化代码</span></span><br><span class="line">     <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span><br><span class="line">     </span>&#123;</span><br><span class="line">         <span class="comment">//每个映射实体初始化属性相关信息</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p>然后为每个领域模型创建一个映射限定类，并继承BaseDomainMapping基类，重写init()方法。这里我创建了一个Order模型的映射限定类，代码如下：<br>cs<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// order领域模型映射限定类</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMapping</span> : <span class="title">BaseDomainMapping</span>&lt;<span class="title">Order</span>&gt;</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> Init()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//映射到数据库的表名为Orders</span></span><br><span class="line">        <span class="keyword">this</span>.ToTable(<span class="string">"Orders"</span>);</span><br><span class="line">        <span class="comment">//映射到数据库表中的主键为ID</span></span><br><span class="line">        <span class="keyword">this</span>.HasKey(l =&gt; l.ID);</span><br><span class="line">        <span class="comment">//映射到数据库表中的字段Number为非空，并且最大50个字符长度。</span></span><br><span class="line">        <span class="keyword">this</span>.Property(l =&gt; l.Number).HasMaxLength(<span class="number">50</span>).IsRequired();</span><br><span class="line">        <span class="comment">//映射到数据库表中的字段ShipAmount为非空。</span></span><br><span class="line">        <span class="keyword">this</span>.Property(l =&gt; l.ShipAmount).IsRequired();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在方法init()中，代码注释表明了每行代码的限定含义。并在下面要介绍的数据映射器中加载这些限定配置信息。</p>
<h2 id="数据映射器">数据映射器</h2><p>数据映射器就是将模型数据转换为数据库数据进行操作的地方了，所以EF出场！每个数据映射器都需要继承EF中的类型DbContext，通过它可以实现基础的数据操作。<br>在为每一个模型创建数据映射器前，我们首先创建一个BaseDbContext数据映射器基类。<br>实际开发中，很多模型只是简单的增删改查操作，所以定义一个通用基类是有必要的，基类实现IDataMapper接口并实现所有方法细节。然后让简单的类型来继承它，这样就不用再去写一些重复的代码了。<br>当然此基类也需要继承EF的基类DbContext从而实现数据操作。<br>数据映射器的运行流程：</p>
<blockquote>
<ul>
<li>实例化：在实例化数据映射器时也实例化了他继承的基类。</li>
<li>在基类构造函数中：向EF数据上下文的构造函数传递连接字符串资源名，它在内部对配置文件进行查找</li>
<li>触发OnModelCreating事件：调用Utility.LoadMapping(modelBuilder)方法加载上面介绍过的映射限定信息。</li>
<li>在Utility.LoadMapping(modelBuilder)方法中使用反射了来获取所有BaseDomainMapping类型的派生类，然后创建所有派生类实例，并将每个实例加载到构造器中。</li>
</ul>
</blockquote>
<p>Order领域模型的数据映射器OrderDataMapper，可以看到没有写任何代码，直接继承基类即可实现基本操作。代码如下：<br>cs<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// order对象的数据映射器</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderDataMapper</span> : <span class="typename">BaseDbContext</span>&lt;<span class="type">Order</span>&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果order表比较复杂，可以创建一个新的实体类型</span></span><br><span class="line">    <span class="comment">//将order领域模型中需要持久化的数据和表关系映射到新类型中</span></span><br><span class="line">    <span class="comment">//在用新类型进行数据持久化操作时，OrderDataMapper映射器不再继承BaseDbContext</span></span><br><span class="line">    <span class="comment">//因为BaseDbContext是通用接口，适用于简单领域模型的持久化操作</span></span><br><span class="line">    <span class="comment">//复杂类型的数据映射器直接继承和实现 DbContext, IDataMapper&lt;T&gt; where T : class,new() 然后自己手动实现每个接口的细节</span></span><br><span class="line">    <span class="comment">//这也是领域模型的难点所在：将领域模型与数据库模型对应起来。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面的代码介绍了基类如何使用EF操作进行对象的CRUD相关操作，EF的每个操作都在代码中以注释的方式介绍。<br>BaseDbContext数据映射器基类代码：<br>cs<figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 数据映射器通用实现基类</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> BaseDbContext&lt;T&gt; : DbContext, IDataMapper&lt;T&gt; where T : <span class="keyword">class</span>,IEntity, <span class="keyword">new</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">        <span class="comment">///向EF数据上下文的构造函数传递连接字符串资源名，它在内部对配置文件进行查找</span></span><br><span class="line">        <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">        <span class="keyword">public</span> BaseDbContext()</span><br><span class="line">            : base(<span class="string">"name=MySqlConnectionString"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            EFConfig config = <span class="keyword">new</span> EFConfig();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">        <span class="comment">/// 模型创建前触发，每个类型的映射器第一次实例化会触发，以后实例化不会触发此事件</span></span><br><span class="line">        <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> OnModelCreating(DbModelBuilder modelBuilder)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//加载领域模型映射限定信息</span></span><br><span class="line">            Utility.LoadMapping(modelBuilder);</span><br><span class="line">            base.OnModelCreating(modelBuilder);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">        <span class="comment">/// 数据上下文实体列表</span></span><br><span class="line">        <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;T&gt; Entitys &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">        <span class="comment">/// 新增一个对象</span></span><br><span class="line">        <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">        <span class="keyword">public</span> virtual <span class="built_in">bool</span> Create(T item)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将需要新增的对象添加到实体列表即可，此时对象还在内存中</span></span><br><span class="line">            <span class="keyword">this</span>.Entitys.Add(item);</span><br><span class="line">            <span class="comment">//将所做的操作保存到数据库</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.SaveChanges() &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">        <span class="comment">/// 更细一个对象</span></span><br><span class="line">        <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">        <span class="keyword">public</span> virtual <span class="built_in">bool</span> Update(T item)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将对象的状态标记为已修改即可，此时对象还没有保存到数据库</span></span><br><span class="line">            <span class="keyword">this</span>.Entry(item).State = EntityState.Modified;</span><br><span class="line">            <span class="comment">//保存到数据库，当此记录数据库不存在时，将抛出异常</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.SaveChanges() &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">        <span class="comment">/// 删除一个对象</span></span><br><span class="line">        <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">        <span class="keyword">public</span> virtual <span class="built_in">bool</span> Delete(T item)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将对象的状态标记为已删除，此时对象从内存中删除，但是还没有在数据库删除</span></span><br><span class="line">            <span class="keyword">this</span>.Entry(item).State = EntityState.Deleted;</span><br><span class="line">            <span class="comment">//删除数据库对应数据，当此记录数据库不存在时，将抛出异常</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.SaveChanges() &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		...........由于代码过多，就不贴全了，可以下载示例程序查看。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>关于mysql和oracle组件的实现其实和以上示例的MSSQL组件类似，有兴趣可以在文章后面下载示例程序看。</p>
<h1 id="下一节">下一节</h1><p>下一节将介绍外键和组件调用的示例操作。<br>源码可以点击 <a href="http://pan.baidu.com/s/1i3ZwE5v" target="_blank" rel="external">这里下载</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="数据访问组件">数据访问组件</h1><p>第一章大致介绍了使用插件模式实现数据访问层的好处，可以完全将业务层和数据访问层解耦，达到面向接口编程的目的。<br>EF属于配置型框架，当我们需要切换底层数据访问层实现时，无需编译程序，只需在程序配置文件中进行配置即可，]]>
    </summary>
    
      <category term="EF" scheme="http://www.knna.me/tags/EF/"/>
    
      <category term="DotNet技术" scheme="http://www.knna.me/categories/DotNet%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用ORM框架(EF6)基于插件模式封装数据访问层（一）从仓储层开始]]></title>
    <link href="http://www.knna.me/2015/10/21/%E4%BD%BF%E7%94%A8ORM%E6%A1%86%E6%9E%B6(EF6)%E5%9F%BA%E4%BA%8E%E6%8F%92%E4%BB%B6%E6%A8%A1%E5%BC%8F%E5%B0%81%E8%A3%85%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%B1%82%EF%BC%88%E4%B8%80%EF%BC%89%E4%BB%8E%E4%BB%93%E5%82%A8%E5%B1%82%E5%BC%80%E5%A7%8B/"/>
    <id>http://www.knna.me/2015/10/21/使用ORM框架(EF6)基于插件模式封装数据访问层（一）从仓储层开始/</id>
    <published>2015-10-21T03:48:58.000Z</published>
    <updated>2015-12-30T05:40:22.000Z</updated>
    <content type="html"><![CDATA[<h1 id="O/RM框架介绍">O/RM框架介绍</h1><p>全称：对象关系映射(Object Relational Mapping)，简称ORM，或O/RM。<br>ORM的基本功能就是将系统需要持久化的类型匹配到持久化容器中，一般持久化容器就是数据库。<br>ORM的优点是使用方便，对于增删改查这类一般性的应用非常简易，可以节省很多手动编写代码的时间和精力。<br>它和领域驱动模型搭配开发非常好用，这里EF相关文章中的业务逻辑层使用领域驱动模式，关于领域驱动模型会在这个系列文章完成后介绍。<br>EF是微软公司的ORM框架，目前最新版本是6.1.1，对MSSQL的支持比较好，网上介绍说对Oracle数据库有些操作支持不太好，暂时没有发现是哪些操作支持不好，在我的实例中对oracle进行基础CRUD操作，没有发现任何问题。<br>EF一共有三种开发模式：</p>
<blockquote>
<ul>
<li>DB First数据库优先：首先设计好数据库，然后创建ADO.NET实体数据模型进行操作。</li>
<li>Code First代码优先：不用设计数据库，只需在项目中写好类型，并将类型对应到数据库中，由EF来自动生成数据库。</li>
<li>Model First模型优先：此模式和代码优先非常类似。都是由EF来自动创建数据库。</li>
</ul>
</blockquote>
<p>在我们的示例中，采用的是Code First即代码优先模式，不用管数据库，EF在运行期会自动生成。</p>
<h1 id="插件模式介绍">插件模式介绍</h1><p>数据访问组件将采用插件模式实现，这样可以完全将业务层和数据访问层解耦，达到面向接口编程的目的，并且在以后更换数据库或者修改组件实现的时候，完全不影响业务逻辑层，当然影响表现层就更无从说起了。</p>
<h1 id="仓储模式介绍">仓储模式介绍</h1><p>仓储层（Repository）介于领域层与数据映射层（数据访问层）之间，在业务逻辑层的领域模型中，只包含了该领域模型相关的业务方法，<br>不包含任何与数据持久化相关的代码，所以这里使用了仓储模式来为每个领域模型提供数据的相关操作,并且领域层也不知道仓储层的任何信息。</p>
<h1 id="创建项目">创建项目</h1><h2 id="项目结构">项目结构</h2><p>创建的项目结构如图：<br><img src="/images/public/8.jpg" alt="images"><br>项目说明：</p>
<blockquote>
<ul>
<li>Domain领域驱动模型层：也就是业务逻辑层，这里的业务都是细粒度的接口。</li>
<li>Common公共调用：提供通用工具类给各个层调用。</li>
<li>Oracle、SqlServer、Mysql这三个分别是不同的数据访问组件：使用了插件模式，提供不同数据库的访问，并可以动态切换。</li>
<li>Repository仓储层：抽象所有数据访问的接口，服务层通过使用此层提供的接口来调用所有功能；接口的实现由数据访问层的各个组件完成。</li>
<li>App表现层：负责数据呈现和交互。</li>
<li>Services服务层：此层介于业务逻辑层和表现层之间，提供粗粒度的接口供表现层调用，粗粒度的接口中调用业务逻辑层中的细粒度接口组合完成一个实际用例；一个粗粒度接口一般对应一个实际用例。</li>
</ul>
</blockquote>
<h2 id="插件安装">插件安装</h2><blockquote>
<ul>
<li>在工具栏中定位到 工具-Nuget程序包管理器-管理解决方案的Nuget程序包。</li>
<li>下载EF：在联机中搜索entityframework，并勾选安装到Oracle、Mysql、SqlServer项目中。</li>
<li>MSSQL连接驱动：EF插件自带了MSSQL的驱动，无需再安装。</li>
<li>MySql连接驱动：在联机中搜索mysql.data和mysql.data.entity，并勾选安装到mysql项目中。</li>
<li>Oracle连接驱动：在联机中搜索Oracle.ManagedDataAccess和Oracle.ManagedDataAccess.EntityFramework，并勾选安装到Oracle项目中。</li>
<li>数据访问层相关插件安装完成。</li>
</ul>
</blockquote>
<p>这里是安装好插件后的列表,第一个和最后一个插件是用于控制反转的，在后续章节会介绍。<br><img src="/images/public/9.jpg" alt="images"></p>
<h1 id="仓储层">仓储层</h1><h2 id="数据映射器接口">数据映射器接口</h2><p>IDataMapper泛型接口：每个业务逻辑层的领域模型在底层数据访问组件中对应一个数据映射器，数据映射器实现此接口，并填充接口方法的所有实现，此接口包含了类型与数据库映射的所有方法。包括以下几大类方法：</p>
<blockquote>
<ul>
<li>对象增删改的方法</li>
<li>获取LINQ查询对象的方法</li>
<li>查询所有数据的方法</li>
<li>根据条件获取数据的方法</li>
<li>获取所有数据条数的方法</li>
<li>根据条件获取所有数据条数的方法</li>
<li>获取分页数据的方法</li>
<li>根据条件获取分页数据的方法</li>
<li>根据主键值获取对象的方法</li>
<li>执行自定义SQL语句的方法</li>
<li>查询自定义SQL语句的方法</li>
</ul>
</blockquote>
<p>大部分方法还提供了多个重载版本，比如 GetAll 方法，一共有四个重载版本，他们分别是：</p>
<blockquote>
<ul>
<li>GetAll() //获取所有数据</li>
<li>GetAll(Expression<func<t,dynamic>&gt; selector) //获取所有数据并指定查询的字段，这里的参数为 lambda 表达式，用于提取一个匿名对象，对象中的属性就是需要查询的字段</func<t,dynamic></li>
<li>GetAll(IQueryable query) //根据已有的linq查询对象获取对象所有数据，定义这个重载的原因是，有时调用GetAll方法需要对结果进行排序或填充外键数据操作，这时就可以使用获取LINQ查询对象的方法来获取linq对象，使用后面要介绍的工具类进行排序和数据填充，将已附加了操作的Linq查询对象直接传入方法即可。</li>
<li>GetAll(IQueryable query, Expression<func<t,dynamic>&gt; selector) //据已有的linq查询对象获取对象所有数据并指定查询字段</func<t,dynamic></li>
</ul>
</blockquote>
<p>IDataMapper泛型接口代码：<br>cs<figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 数据映射器接口</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;typeparam name=<span class="string">"T"</span>&gt;&lt;/typeparam&gt;</span><br><span class="line">public interface IDataMapper&lt;T&gt;  where T : class,new()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="preprocessor">#<span class="keyword">region</span> 持久化数据</span></span><br><span class="line">    bool Create(T item)<span class="comment">;</span></span><br><span class="line">    bool Update(T item)<span class="comment">;</span></span><br><span class="line">    bool Delete(T item)<span class="comment">;</span></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">region</span> 获取所有数据</span></span><br><span class="line">    IQueryable&lt;T&gt; GetQueryable()<span class="comment">;</span></span><br><span class="line">    IList&lt;T&gt; GetAll()<span class="comment">;</span></span><br><span class="line">    IList&lt;T&gt; GetAll(Expression&lt;<span class="function"><span class="keyword">Func</span>&lt;<span class="title">T</span>, <span class="title">dynamic</span>&gt;&gt; <span class="title">selector</span>);</span></span><br><span class="line"></span><br><span class="line">    IList&lt;T&gt; GetAll(IQueryable&lt;T&gt; query)<span class="comment">;</span></span><br><span class="line">    IList&lt;T&gt; GetAll(IQueryable&lt;T&gt; query, Expression&lt;<span class="function"><span class="keyword">Func</span>&lt;<span class="title">T</span>, <span class="title">dynamic</span>&gt;&gt; <span class="title">selector</span>);</span></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">region</span> 获取分页数据</span></span><br><span class="line">    //分页</span><br><span class="line">    IList&lt;T&gt; GetPage(<span class="built_in">int</span> pageIndex, <span class="built_in">int</span> pageSize, out <span class="built_in">int</span> total)<span class="comment">;</span></span><br><span class="line">    IList&lt;T&gt; GetPage(<span class="built_in">int</span> pageIndex, <span class="built_in">int</span> pageSize, out <span class="built_in">int</span> total, Expression&lt;<span class="function"><span class="keyword">Func</span>&lt;<span class="title">T</span>, <span class="title">dynamic</span>&gt;&gt; <span class="title">selector</span>);</span></span><br><span class="line"></span><br><span class="line">    IList&lt;T&gt; GetPage(IQueryable&lt;T&gt; query, <span class="built_in">int</span> pageIndex, <span class="built_in">int</span> pageSize, out <span class="built_in">int</span> total)<span class="comment">;</span></span><br><span class="line">    IList&lt;T&gt; GetPage(IQueryable&lt;T&gt; query, <span class="built_in">int</span> pageIndex, <span class="built_in">int</span> pageSize, out <span class="built_in">int</span> total, Expression&lt;<span class="function"><span class="keyword">Func</span>&lt;<span class="title">T</span>, <span class="title">dynamic</span>&gt;&gt; <span class="title">selector</span>);</span></span><br><span class="line">    //根据条件获取分页数据</span><br><span class="line">    IList&lt;T&gt; GetPageByCriteria(<span class="built_in">int</span> pageIndex, <span class="built_in">int</span> pageSize, out <span class="built_in">int</span> total, Expression&lt;<span class="function"><span class="keyword">Func</span>&lt;<span class="title">T</span>, <span class="title">bool</span>&gt;&gt; <span class="title">where</span>);</span></span><br><span class="line">    IList&lt;T&gt; GetPageByCriteria(<span class="built_in">int</span> pageIndex, <span class="built_in">int</span> pageSize, out <span class="built_in">int</span> total, Expression&lt;<span class="function"><span class="keyword">Func</span>&lt;<span class="title">T</span>, <span class="title">bool</span>&gt;&gt; <span class="title">where</span>, <span class="title">Expression</span>&lt;<span class="title">Func</span>&lt;<span class="title">T</span>, <span class="title">dynamic</span>&gt;&gt; <span class="title">selector</span>);</span></span><br><span class="line"></span><br><span class="line">    IList&lt;T&gt; GetPageByCriteria(IQueryable&lt;T&gt; query, <span class="built_in">int</span> pageIndex, <span class="built_in">int</span> pageSize, out <span class="built_in">int</span> total, Expression&lt;<span class="function"><span class="keyword">Func</span>&lt;<span class="title">T</span>, <span class="title">bool</span>&gt;&gt; <span class="title">where</span>);</span></span><br><span class="line">    IList&lt;T&gt; GetPageByCriteria(IQueryable&lt;T&gt; query, <span class="built_in">int</span> pageIndex, <span class="built_in">int</span> pageSize, out <span class="built_in">int</span> total, Expression&lt;<span class="function"><span class="keyword">Func</span>&lt;<span class="title">T</span>, <span class="title">bool</span>&gt;&gt; <span class="title">where</span>, <span class="title">Expression</span>&lt;<span class="title">Func</span>&lt;<span class="title">T</span>, <span class="title">dynamic</span>&gt;&gt; <span class="title">selector</span>);</span></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">region</span> 获取数量</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> GetCount()<span class="comment">;</span></span><br><span class="line">    <span class="built_in">int</span> GetCountByCriteria(Expression&lt;<span class="function"><span class="keyword">Func</span>&lt;<span class="title">T</span>, <span class="title">bool</span>&gt;&gt; <span class="title">where</span>);</span></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">region</span> 根据主键获取对象</span></span><br><span class="line">    //获取单个对象</span><br><span class="line">    T GetByKey(object key)<span class="comment">;</span></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">region</span> 根据条件获取数据</span></span><br><span class="line">    IList&lt;T&gt; GetByCriteria(Expression&lt;<span class="function"><span class="keyword">Func</span>&lt;<span class="title">T</span>, <span class="title">bool</span>&gt;&gt; <span class="title">where</span>);</span></span><br><span class="line">    IList&lt;T&gt; GetByCriteria(Expression&lt;<span class="function"><span class="keyword">Func</span>&lt;<span class="title">T</span>, <span class="title">bool</span>&gt;&gt; <span class="title">where</span>, <span class="title">Expression</span>&lt;<span class="title">Func</span>&lt;<span class="title">T</span>, <span class="title">dynamic</span>&gt;&gt; <span class="title">selector</span>);</span></span><br><span class="line"></span><br><span class="line">    IList&lt;T&gt; GetByCriteria(IQueryable&lt;T&gt; query, Expression&lt;<span class="function"><span class="keyword">Func</span>&lt;<span class="title">T</span>, <span class="title">bool</span>&gt;&gt; <span class="title">where</span>);</span></span><br><span class="line">    IList&lt;T&gt; GetByCriteria(IQueryable&lt;T&gt; query, Expression&lt;<span class="function"><span class="keyword">Func</span>&lt;<span class="title">T</span>, <span class="title">bool</span>&gt;&gt; <span class="title">where</span>, <span class="title">Expression</span>&lt;<span class="title">Func</span>&lt;<span class="title">T</span>, <span class="title">dynamic</span>&gt;&gt; <span class="title">selector</span>);</span></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">region</span> 自定义查询</span></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 执行SQL语句，返回受影响行数</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=<span class="string">"sqlCommand"</span>&gt;sql语句&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=<span class="string">"parameters"</span>&gt;可选参数&lt;/param&gt;</span><br><span class="line">    /// &lt;returns&gt;受影响行数&lt;/returns&gt;</span><br><span class="line">    <span class="built_in">int</span> ExecuteSqlCommand(<span class="built_in">string</span> sqlCommand, params object[] parameters)<span class="comment">;</span></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 执行SQL语句，返回查询结果</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=<span class="string">"sqlCommand"</span>&gt;sql语句&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=<span class="string">"parameters"</span>&gt;可选参数&lt;/param&gt;</span><br><span class="line">    /// &lt;returns&gt;查询结果内存表&lt;/returns&gt;</span><br><span class="line">    DataTable SqlQuery(<span class="built_in">string</span> sqlCommand, params object[] parameters)<span class="comment">;</span></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="组件接口">组件接口</h2><p>IDataContext接口：所有底层的数据访问层组件需要实现此接口，此接口与上面的数据映射器接口几乎一致，多了两个方法：<br>第一个：获取对象映射器的方法GetDataMapper()，在底层组件实现中会调用此方法获取相关类型的数据映射器对象已实现的接口，然后调用数据映射器接口的实现方法。<br>第二个：用于数据库优先模式下的模型检查的方法：DBFirstCheck()。<br>IDataContext接口代码只贴出多出的方法签名，其他就不贴出来了，和IDataMapper接口差不多的方法，可以在文章后面下载源码查看<br>cs<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">  <span class="comment">/// 数据访问组件接口</span></span><br><span class="line">  <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">  <span class="keyword">public</span> interface IDataContext : IDisposable</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">      <span class="comment">/// 用于数据库优先模式下的模型检查</span></span><br><span class="line">      <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">      <span class="literal">void</span> DBFirstCheck();</span><br><span class="line"></span><br><span class="line">      <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">      <span class="comment">/// 获取T对象的数据映射器实例</span></span><br><span class="line">      <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">      IDataMapper&lt;T&gt; GetDataMapper&lt;T&gt;() <span class="keyword">where</span> T : class, <span class="literal">new</span>();</span><br><span class="line"></span><br><span class="line"><span class="attribute">...</span><span class="attribute">...</span><span class="attribute">...</span><span class="attribute">...</span><span class="attribute">...</span><span class="built_in">.</span><br><span class="line">  </span>&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="数据访问基类">数据访问基类</h1><p>创建一个抽象基类BaseDataContext并实现IDataContext接口，在基类中实现了将IDataContext接口的方法与IDataMapper接口的方法对应起来，将获取数据映射器的方法GetDataMapper定义为抽象的方法。<br>其实也可以在底层的数据访问组件直接实现IDataContext接口，但是创建一个基类可以减少底层组件的代码量，在数据访问组件中，直接继承BaseDataContext基类，并重写获取数据映射器的方法GetDataMapper即可。<br>抽象基类BaseDataContext代码：<br>cs<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">  <span class="comment">/// 数据访问层组件基类 </span></span><br><span class="line">  <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">  <span class="keyword">public</span> abstract <span class="class"><span class="keyword">class</span> <span class="title">BaseDataContext</span> : <span class="typename">IDataContext</span></span></span><br><span class="line">  &#123;</span><br><span class="line"><span class="comment">//用于数据库优先模式下的模型检查</span></span><br><span class="line">      <span class="keyword">public</span> abstract void DBFirstCheck();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//定义返回数据映射器的方法签名</span></span><br><span class="line">      <span class="keyword">public</span> abstract IDataMapper<span class="type">&lt;T&gt;</span> GetDataMapper<span class="type">&lt;T&gt;</span>() where T : <span class="class"><span class="keyword">class</span>,<span class="typename">new</span></span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> IQueryable<span class="type">&lt;T&gt;</span> GetQueryable<span class="type">&lt;T&gt;</span>() where T : <span class="class"><span class="keyword">class</span>, <span class="typename">new</span></span>()</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> GetDataMapper<span class="type">&lt;T&gt;</span>().GetQueryable();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> IList<span class="type">&lt;T&gt;</span> GetAll<span class="type">&lt;T&gt;</span>() where T : <span class="class"><span class="keyword">class</span>, <span class="typename">new</span></span>()</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> GetDataMapper<span class="type">&lt;T&gt;</span>().GetAll();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">..............这里就不贴出全部代码了，有兴趣下载后面的示例代码查看。</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="下一节">下一节</h1><p>本章把仓储层介绍完了，下一节介绍如何使用插件模式实现数据访问层的组件开发。<br>源码可以点击 <a href="http://pan.baidu.com/s/1i3ZwE5v" target="_blank" rel="external">这里下载</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="O/RM框架介绍">O/RM框架介绍</h1><p>全称：对象关系映射(Object Relational Mapping)，简称ORM，或O/RM。<br>ORM的基本功能就是将系统需要持久化的类型匹配到持久化容器中，一般持久化容器就是数据库。<br>ORM的优]]>
    </summary>
    
      <category term="EF" scheme="http://www.knna.me/tags/EF/"/>
    
      <category term="DotNet技术" scheme="http://www.knna.me/categories/DotNet%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOCP完成端口实例（二）]]></title>
    <link href="http://www.knna.me/2015/10/11/IOCP%E5%AE%8C%E6%88%90%E7%AB%AF%E5%8F%A3%E5%AE%9E%E4%BE%8B%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.knna.me/2015/10/11/IOCP完成端口实例（二）/</id>
    <published>2015-10-11T08:50:26.000Z</published>
    <updated>2015-12-30T05:45:10.000Z</updated>
    <content type="html"><![CDATA[<h2 id="IOCP框架核心功能">IOCP框架核心功能</h2><p>上一篇文章把IOCP需要用到的相关功能模块已经封装好了，这章主要编写IOCP的核心功能实现，功能大致如下：<a id="more"></a></p>
<blockquote>
<ul>
<li>初始化</li>
<li>启动、停止</li>
<li>接收连接</li>
<li>接收数据</li>
<li>发送数据</li>
<li>处理超时</li>
</ul>
</blockquote>
<h3 id="初始化">初始化</h3><p>在系统初始化时，需要做以下工作：</p>
<blockquote>
<ul>
<li>实例化空闲的连接套接字数据池并向数据池添加数据</li>
<li>实例化空闲业务数据池，并向数据池添加数据</li>
<li>实例化空闲的用户对象数据池，并向数据池添加数据</li>
<li>实例化已连接用户数据池</li>
<li>实例化接收超时检测集合</li>
<li>实例化待处理列队数据池</li>
<li>实例化检测超时功能</li>
<li>实例化工作线程池</li>
<li>实例化内存管理器</li>
</ul>
</blockquote>
<p>代码如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">region</span> 全局变量</span></span><br><span class="line">        <span class="comment">//系统运行状态</span></span><br><span class="line">        <span class="keyword">bool</span> _runing = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">bool</span> ServerStatus &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> _runing; &#125; &#125;</span><br><span class="line">        <span class="comment">//配置</span></span><br><span class="line">        ServerSettings _settings;</span><br><span class="line">        <span class="comment">//监听对象</span></span><br><span class="line">        Socket _listenerSocket;</span><br><span class="line">        <span class="comment">//空闲的接收连接异步套接字数据池</span></span><br><span class="line">        StackPool&lt;SocketAsyncEventArgs&gt; _freeAcceptEventArgsPool;</span><br><span class="line">        <span class="comment">//控制最大连接数</span></span><br><span class="line">        Semaphore _maxAcceptLock;</span><br><span class="line">        <span class="comment">//空闲客户端对象数据池</span></span><br><span class="line">        StackPool&lt;UserToken&gt; _freeUserTokenPool;</span><br><span class="line">        <span class="comment">//套接字使用的内存</span></span><br><span class="line">        BufferManager _eventArgsBufferManager;</span><br><span class="line">        <span class="comment">//业务项使用的内存</span></span><br><span class="line">        BufferManager _pocItemBufferManager;</span><br><span class="line">        <span class="comment">//当前连接客户端列表</span></span><br><span class="line">        DataPool&lt;UserToken&gt; _acceptUserPool;</span><br><span class="line">        <span class="comment">//检测接收超时列表</span></span><br><span class="line">        DataPool&lt;UserToken&gt; _receiveOvertimePool;</span><br><span class="line">        <span class="comment">//空闲业务项数据池</span></span><br><span class="line">        StackPool&lt;PocItem&gt; _freePocItemPool;</span><br><span class="line">        <span class="comment">//业务列队处理池</span></span><br><span class="line">        BlockingQueue&lt;PocItem&gt; _pocItemBlockingPool;</span><br><span class="line">        <span class="comment">//处理业务线程池</span></span><br><span class="line">        ThreadWorkPool&lt;PocItem&gt; _doWorkThreadPool;</span><br><span class="line">        <span class="comment">//处理接收超时的线程</span></span><br><span class="line">        CheckOverTime&lt;UserToken&gt; _checkReceiveOvertime;</span><br><span class="line">        <span class="comment">//处理套接字超时的线程</span></span><br><span class="line">        CheckOverTime&lt;UserToken&gt; _checkSocketOvertime;</span><br><span class="line">        <span class="comment">//套接字心跳设置数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] _keepAliveValues;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//统计字段</span></span><br><span class="line">        <span class="keyword">int</span> _acceptErrorCount;</span><br><span class="line">        <span class="keyword">int</span> _pocItemDoErrorCount;</span><br><span class="line">        <span class="keyword">int</span> _sendErrorCount;</span><br><span class="line">        <span class="keyword">int</span> _receiveErrorCount;</span><br><span class="line">        <span class="preprocessor">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> 初始化</span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Log.WriteLog(IocpLogType.Info, <span class="string">"正在进行初始化"</span>);</span><br><span class="line"></span><br><span class="line">            _freeAcceptEventArgsPool = <span class="keyword">new</span> StackPool&lt;SocketAsyncEventArgs&gt;(_settings.MaxAcceptClients);</span><br><span class="line">            _freeUserTokenPool = <span class="keyword">new</span> StackPool&lt;UserToken&gt;(_settings.MaxAcceptClients);</span><br><span class="line">            _freePocItemPool = <span class="keyword">new</span> StackPool&lt;PocItem&gt;(_settings.MaxAcceptClients);</span><br><span class="line"></span><br><span class="line">            _acceptUserPool = <span class="keyword">new</span> DataPool&lt;UserToken&gt;();</span><br><span class="line">            _receiveOvertimePool = <span class="keyword">new</span> DataPool&lt;UserToken&gt;();</span><br><span class="line">            _pocItemBlockingPool = <span class="keyword">new</span> BlockingQueue&lt;PocItem&gt;();</span><br><span class="line"></span><br><span class="line">            _checkReceiveOvertime = <span class="keyword">new</span> CheckOverTime&lt;UserToken&gt;(<span class="number">5</span> * <span class="number">1000</span>, _settings.ReceiveOvertime, _receiveOvertimePool, CheckReceiveOverTime);</span><br><span class="line">            _checkSocketOvertime = <span class="keyword">new</span> CheckOverTime&lt;UserToken&gt;(<span class="number">10</span> * <span class="number">1000</span>, _settings.SocketOvertime, _acceptUserPool, CheckSocketOverTime);</span><br><span class="line"></span><br><span class="line">            _doWorkThreadPool = <span class="keyword">new</span> ThreadWorkPool&lt;PocItem&gt;(_pocItemBlockingPool, _settings.DoReceiveWorkThreadNum, DoWork, DoWorkError);</span><br><span class="line">            _maxAcceptLock = <span class="keyword">new</span> Semaphore(_settings.MaxAcceptClients, _settings.MaxAcceptClients);</span><br><span class="line">            _eventArgsBufferManager = <span class="keyword">new</span> BufferManager(_settings.MaxAcceptClients * _settings.ReceiveBufferSize * <span class="number">2</span>, _settings.ReceiveBufferSize);</span><br><span class="line">            _eventArgsBufferManager.InitBuffer();</span><br><span class="line">            _pocItemBufferManager = <span class="keyword">new</span> BufferManager(_settings.MaxAcceptClients * _settings.TransDataBufferSize, _settings.TransDataBufferSize);</span><br><span class="line">            _pocItemBufferManager.InitBuffer();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _settings.MaxAcceptClients; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                _freeAcceptEventArgsPool.Push(CreateAccetpingEventArgs());</span><br><span class="line"></span><br><span class="line">                UserToken userToken = <span class="keyword">new</span> UserToken(_settings.SndRevCacheSize);</span><br><span class="line">                _eventArgsBufferManager.SetBuffer&lt;SocketAsyncEventArgs&gt;(userToken.ReceiveEventArgs, (args, buffer, offset, lenght) =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    args.SetBuffer(buffer, offset, lenght);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                userToken.ReceiveEventArgs.Completed += IO_Completed;</span><br><span class="line">                userToken.SendEventArgs.Completed += IO_Completed;</span><br><span class="line">                _freeUserTokenPool.Push(userToken);</span><br><span class="line"></span><br><span class="line">                _freePocItemPool.Push(CreatePocItem());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">uint</span> dummy = <span class="number">0</span>;</span><br><span class="line">            _keepAliveValues = <span class="keyword">new</span> <span class="keyword">byte</span>[Marshal.SizeOf(dummy) * <span class="number">3</span>];</span><br><span class="line">            BitConverter.GetBytes((<span class="keyword">uint</span>)<span class="number">1</span>).CopyTo(_keepAliveValues, <span class="number">0</span>);</span><br><span class="line">            BitConverter.GetBytes((<span class="keyword">uint</span>)_settings.CheckAliveInterval).CopyTo(_keepAliveValues, Marshal.SizeOf(dummy));</span><br><span class="line">            BitConverter.GetBytes((<span class="keyword">uint</span>)_settings.CheckAliveInterval).CopyTo(_keepAliveValues, Marshal.SizeOf(dummy) * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            Log.WriteLog(IocpLogType.Info, <span class="string">"初始化完成"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="启动、停止">启动、停止</h3><p>启动时：</p>
<blockquote>
<ul>
<li>实例化监听对象并启动监听，投递接收连接请求</li>
<li>启动超时检测线程</li>
</ul>
</blockquote>
<p>代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> 启动系统</span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           _runing = <span class="keyword">true</span>;</span><br><span class="line">           <span class="comment">//socket对象在关闭后即被释放，不能重复使用，所以每次启动实例化</span></span><br><span class="line">           _listenerSocket = <span class="keyword">new</span> Socket(_settings.LocalBindEndPoint.AddressFamily, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line">           <span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">try</span></span><br><span class="line">               &#123;</span><br><span class="line">                   _listenerSocket.Bind(_settings.LocalBindEndPoint);</span><br><span class="line">                   _listenerSocket.Listen(_settings.MaxAcceptClients);</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">catch</span> &#123; Thread.Sleep(<span class="number">1000</span> * <span class="number">5</span>); &#125;<span class="comment">//重启时，系统未能及时获取IP地址打开监听会出现异常</span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//开始投递接收连接</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _settings.MaxAcceptingClients; i++)</span><br><span class="line">           &#123;</span><br><span class="line">               PostAccept();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//启动超时检测线程</span></span><br><span class="line">           _checkReceiveOvertime.Start();</span><br><span class="line">           _checkSocketOvertime.Start();</span><br><span class="line">           Log.WriteLog(IocpLogType.Info, <span class="string">"系统启动成功"</span>);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p>
<p>停止时：</p>
<blockquote>
<ul>
<li>关闭监听对象</li>
<li>关闭超时检测线程</li>
<li>等待工作线程池将未处理任务处理完成</li>
<li>强制下线所有已连接客户端</li>
</ul>
</blockquote>
<p>代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> 关闭系统</span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Exit</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="comment">//单独启动一个线程去关闭，避免阻塞UI</span></span><br><span class="line">            Task.Factory.StartNew(DoExit);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DoExit</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            _runing = <span class="keyword">false</span>;</span><br><span class="line">            Log.WriteLog(IocpLogType.Error, <span class="string">"系统正在关闭，处理剩余任务"</span> + _pocItemBlockingPool.Count);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//关闭监听</span></span><br><span class="line">                _listenerSocket.Close();</span><br><span class="line">                <span class="comment">//关闭超时检测线程</span></span><br><span class="line">                _checkReceiveOvertime.Stop();</span><br><span class="line">                _checkSocketOvertime.Stop();</span><br><span class="line">                <span class="comment">//处理剩下的所有业务</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (_pocItemBlockingPool.Count == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//等待当前业务处理完成</span></span><br><span class="line">                        Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//强制所有客户端下线</span></span><br><span class="line">                UserToken[] users = _acceptUserPool.ToArray();</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> user <span class="keyword">in</span> users)</span><br><span class="line">                &#123;</span><br><span class="line">                    CloseClientSocket(user, CloseSocketReason.Normal);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> &#123; &#125;</span><br><span class="line">            Log.WriteLog(IocpLogType.Info, <span class="string">"系统已关闭"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="接收连接">接收连接</h3><p>启动系统时，投递了接收连接请求，配置文件中配置了同时接收连接数，接收连接数即投递次数。<br>客户端连接请求到达时在ProcessAccept方法中处理<br>处理流程：</p>
<blockquote>
<ul>
<li>判断连接是否成功，失败直接关闭套接字</li>
<li>从空闲用户数据池中取出一个对象，初始化对象相关数据，并将此对象添加到已连接用户池</li>
<li>释放接收连接的套接字对象</li>
<li>投递接收数据请求</li>
<li>重新投递接收连接请求</li>
</ul>
</blockquote>
<p>代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> 投递接收请求</span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">PostAccept</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (_runing == <span class="keyword">false</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            _maxAcceptLock.WaitOne();</span><br><span class="line">            SocketAsyncEventArgs acceptEventArgs = _freeAcceptEventArgsPool.Pop() ?? CreateAccetpingEventArgs();</span><br><span class="line">            acceptEventArgs.AcceptSocket = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">bool</span> waitFlag = _listenerSocket.AcceptAsync(acceptEventArgs);</span><br><span class="line">            <span class="keyword">if</span> (waitFlag == <span class="keyword">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ProcessAccept(acceptEventArgs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> 处理连接请求</span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="acceptEventArgs"&gt;</span><span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcessAccept</span>(<span class="params">SocketAsyncEventArgs acceptEventArgs</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (acceptEventArgs.SocketError == SocketError.OperationAborted)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//系统关闭，操作取消</span></span><br><span class="line">                _maxAcceptLock.Release();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (acceptEventArgs.SocketError != SocketError.Success)</span><br><span class="line">            &#123;</span><br><span class="line">                Interlocked.Increment(<span class="keyword">ref</span> _acceptErrorCount);</span><br><span class="line">                CloseSocket(acceptEventArgs.AcceptSocket);</span><br><span class="line">                _maxAcceptLock.Release();</span><br><span class="line">                PostAccept();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            UserToken userToken = _freeUserTokenPool.Pop();</span><br><span class="line">            _acceptUserPool.Push(userToken);</span><br><span class="line">            userToken.Reset();</span><br><span class="line">            userToken.AcceptSocket = acceptEventArgs.AcceptSocket;</span><br><span class="line">            userToken.AcceptSocket.IOControl(IOControlCode.KeepAliveValues, _keepAliveValues, <span class="keyword">null</span>);</span><br><span class="line">            OnClientConnect(userToken);</span><br><span class="line">            _freeAcceptEventArgsPool.Push(acceptEventArgs);</span><br><span class="line">            PostReceive(userToken.ReceiveEventArgs);</span><br><span class="line">            PostAccept();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> 客户端连接时</span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="sender"&gt;</span><span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="e"&gt;</span><span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">acceptEventArgs_Completed</span>(<span class="params"><span class="keyword">object</span> sender, SocketAsyncEventArgs e</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            ProcessAccept(e);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="接收数据">接收数据</h3><p>收到连接时，投递接收请求，当有新数据到达时在ProcessReceive方法中处理<br>处理流程：</p>
<blockquote>
<ul>
<li>将此用户从接收超时检测集合中移除</li>
<li>判断接收是否成功，失败直接关闭套接字</li>
<li>判断收到的数据包是否完整，不完整则继续等待下一次数据到达</li>
<li>收到完整数据包后，投递数据包到待处理数据池</li>
</ul>
</blockquote>
<p>代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">region</span> 接收数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> 投递接收数据请求</span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="receiveEventArgs"&gt;</span><span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PostReceive</span>(<span class="params">System.Net.Sockets.SocketAsyncEventArgs receiveEventArgs</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            UserToken userToken = receiveEventArgs.UserToken <span class="keyword">as</span> UserToken;</span><br><span class="line">            <span class="keyword">if</span> (userToken.AsyncReving == <span class="keyword">true</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">lock</span> (userToken)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (receiveEventArgs.CurrentOperating() != SocketAsyncOperating.Completed)</span><br><span class="line">                &#123;</span><br><span class="line">                    Interlocked.Increment(<span class="keyword">ref</span> _receiveErrorCount);</span><br><span class="line">                    Log.WriteLog(IocpLogType.Error, <span class="string">"投递接收错误，套接字正在操作中"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    userToken.AsyncReving = <span class="keyword">true</span>;</span><br><span class="line">                    userToken.ReceiveDateTime = DateTime.Now;</span><br><span class="line">                    _receiveOvertimePool.Push(userToken);</span><br><span class="line">                    <span class="keyword">bool</span> waitFlag = receiveEventArgs.AcceptSocket.ReceiveAsync(receiveEventArgs);</span><br><span class="line">                    <span class="keyword">if</span> (waitFlag == <span class="keyword">false</span>)</span><br><span class="line">                        ProcessReceive(receiveEventArgs);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> 开始接收数据</span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="receiveEventArgs"&gt;</span><span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessReceive</span>(<span class="params">System.Net.Sockets.SocketAsyncEventArgs receiveEventArgs</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            UserToken userToken = receiveEventArgs.UserToken <span class="keyword">as</span> UserToken;</span><br><span class="line">            userToken.AsyncReving = <span class="keyword">false</span>;</span><br><span class="line">            Monitor.Enter(userToken);</span><br><span class="line">            _receiveOvertimePool.Remove(userToken);</span><br><span class="line">            <span class="keyword">if</span> (receiveEventArgs.SocketError == SocketError.ConnectionReset)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//客户端主动关闭</span></span><br><span class="line">                userToken.CloseSocketReason = CloseSocketReason.Normal;</span><br><span class="line">                CloseClientSocket(userToken, userToken.CloseSocketReason);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">(receiveEventArgs.SocketError != SocketError.Success</span>) | receiveEventArgs.BytesTransferred </span>== <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//通讯错误</span></span><br><span class="line">                Interlocked.Increment(<span class="keyword">ref</span> _receiveErrorCount);</span><br><span class="line">                userToken.CloseSocketReason = CloseSocketReason.ReceiveException;</span><br><span class="line">                CloseClientSocket(userToken, userToken.CloseSocketReason);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">userToken.WorkReceive(receiveEventArgs, Receive</span>) </span>== <span class="keyword">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//处理粘包失败</span></span><br><span class="line">                Interlocked.Increment(<span class="keyword">ref</span> _receiveErrorCount);</span><br><span class="line">                userToken.CloseSocketReason = CloseSocketReason.ReceiveException;</span><br><span class="line">                CloseClientSocket(userToken, userToken.CloseSocketReason);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Monitor.Exit(userToken);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> 投递接收的数据包到工作池</span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="package"&gt;</span><span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="offset"&gt;</span><span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="count"&gt;</span><span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;returns&gt;</span><span class="xmlDocTag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Receive</span>(<span class="params">UserToken userToken, <span class="keyword">int</span> offset, <span class="keyword">int</span> count</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Monitor.Enter(userToken);</span><br><span class="line">            PocItem item = GetFreePocItem();</span><br><span class="line">            item.Reset();</span><br><span class="line">            item.UserToken = userToken;</span><br><span class="line">            item.ParseReceiveBuffer(userToken.ReceivePackageBuffer.Buffer, offset + PackageBuffer.PackageHeaderLength, count);</span><br><span class="line">            item.RemoteEndpoint = userToken.AcceptSocket.RemoteEndPoint;</span><br><span class="line">            _pocItemBlockingPool.Push(item);</span><br><span class="line">            Monitor.Exit(userToken);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="preprocessor">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="发送数据">发送数据</h3><p>在此IOCP实例的流程中，处理完接收的数据后，会返回处理结果给客户端，根据项目需要可以在不同的地方投递发送数据请求。<br>投递发送数据请求前，需要调用用户对象的公开方法ParseSendBuffer来写入发送数据，在投递方法中，判断无数据发送时不会投递。<br>投递发送请求处理流程如下：</p>
<blockquote>
<ul>
<li>判断当前套接字是否已经在操作中，状态操作中将输出一条错误信息并返回</li>
<li>判断是否有数据需要发送，没有直接返回</li>
<li>有数据待发送，投递发送数据请求</li>
</ul>
</blockquote>
<p>数据发送完成处理流程如下：</p>
<blockquote>
<ul>
<li>清除已发送的数据包</li>
<li>判断是否发送成功，失败关闭客户端</li>
<li>判断是否还有数据包需要发送，没有直接返回</li>
<li>有数据待发送，投递发送数据请求</li>
</ul>
</blockquote>
<p>代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">region</span> 发送数据</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SendData</span>(<span class="params">PocItem item</span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           PostSend(item.UserToken.SendEventArgs);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> 投递发送请求</span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PostSend</span>(<span class="params">SocketAsyncEventArgs sendEventArgs</span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           UserToken userToken = sendEventArgs.UserToken <span class="keyword">as</span> UserToken;</span><br><span class="line">           <span class="keyword">if</span> (userToken.AsyncSending == <span class="keyword">true</span>)</span><br><span class="line">               <span class="keyword">return</span>;<span class="comment">//正在发送</span></span><br><span class="line">           Monitor.Enter(userToken);</span><br><span class="line">           <span class="keyword">if</span> (sendEventArgs.CurrentOperating() != SocketAsyncOperating.Completed)</span><br><span class="line">           &#123;</span><br><span class="line">               Interlocked.Increment(<span class="keyword">ref</span> _sendErrorCount);</span><br><span class="line">               Log.WriteLog(IocpLogType.Error, <span class="string">"投递发送错误，套接字正在操作中 "</span>);</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">if</span> (userToken.SendPackageBuffer.GetFirstPackage(<span class="keyword">ref</span> count))</span><br><span class="line">           &#123;</span><br><span class="line">               userToken.AsyncSending = <span class="keyword">true</span>;</span><br><span class="line">               sendEventArgs.SetBuffer(userToken.SendPackageBuffer.Buffer, <span class="number">0</span>, count);</span><br><span class="line">               <span class="keyword">bool</span> waitFlag = sendEventArgs.AcceptSocket.SendAsync(sendEventArgs);</span><br><span class="line">               <span class="keyword">if</span> (waitFlag == <span class="keyword">false</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   ProcessSend(sendEventArgs);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//无待发送数据</span></span><br><span class="line">           Monitor.Exit(userToken);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> 发送完成</span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="sendEventArgs"&gt;</span><span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessSend</span>(<span class="params">System.Net.Sockets.SocketAsyncEventArgs sendEventArgs</span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           UserToken userToken = sendEventArgs.UserToken <span class="keyword">as</span> UserToken;</span><br><span class="line">           Monitor.Enter(userToken);</span><br><span class="line">           <span class="comment">//数据发送完毕，清除第一个包</span></span><br><span class="line">           userToken.SendPackageBuffer.ClearFirstPackage();</span><br><span class="line">           <span class="keyword">if</span> (sendEventArgs.SocketError != SocketError.Success)</span><br><span class="line">           &#123;</span><br><span class="line">               Interlocked.Increment(<span class="keyword">ref</span> _sendErrorCount);</span><br><span class="line">               <span class="comment">//发送失败，关闭客户端</span></span><br><span class="line">               CloseClientSocket(userToken, CloseSocketReason.SendException);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">if</span> (userToken.SendPackageBuffer.GetFirstPackage(<span class="keyword">ref</span> count))</span><br><span class="line">               &#123;</span><br><span class="line">                   userToken.AsyncSending = <span class="keyword">true</span>;</span><br><span class="line">                   userToken.SendEventArgs.SetBuffer(userToken.SendPackageBuffer.Buffer, <span class="number">0</span>, count);</span><br><span class="line">                   <span class="keyword">bool</span> waitFlag = userToken.SendEventArgs.AcceptSocket.SendAsync(userToken.SendEventArgs);</span><br><span class="line">                   <span class="keyword">if</span> (waitFlag == <span class="keyword">false</span>)</span><br><span class="line">                   &#123;</span><br><span class="line">                       ProcessSend(userToken.SendEventArgs);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   userToken.AsyncSending = <span class="keyword">false</span>;</span><br><span class="line">               <span class="comment">//投递接收</span></span><br><span class="line">               PostReceive(userToken.ReceiveEventArgs);</span><br><span class="line">           &#125;</span><br><span class="line">           Monitor.Exit(userToken);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="preprocessor">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="处理超时">处理超时</h3><p>系统启动时开始检测套接字生存周期超时和接收超时，若超时直接关闭客户端。<br>代码如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">// 超时检测线程</span><br><span class="line">    public class CheckOverTime&lt;T&gt; where T : UserToken</span><br><span class="line">    &#123;</span><br><span class="line">        //运行状态</span><br><span class="line">        private bool _runing = false;</span><br><span class="line">        //每次检测后的休眠时间</span><br><span class="line">        private int _sleepTime;</span><br><span class="line">        //设定的超时时间</span><br><span class="line">        private int _overtime;</span><br><span class="line">        //超时检测线程</span><br><span class="line">        private Thread _thread;</span><br><span class="line">        //待检测的数据集合</span><br><span class="line">        private DataPool&lt;T&gt; _checkOvertimeList;</span><br><span class="line">        //检测方法的委托</span><br><span class="line">        Action&lt;T, int&gt; _doCheck;</span><br><span class="line"></span><br><span class="line">        public CheckOverTime(int sleepTime, int overtime, DataPool&lt;T&gt; checkOvertimeList, Action&lt;T, int&gt; doCheck)</span><br><span class="line">        &#123;</span><br><span class="line">            _thread = new Thread(Check);</span><br><span class="line">            _thread.IsBackground = true;</span><br><span class="line">            _sleepTime = sleepTime;</span><br><span class="line">            _overtime = overtime;</span><br><span class="line">            _checkOvertimeList = checkOvertimeList;</span><br><span class="line">            _doCheck = doCheck;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 开始检测</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        public void Start()</span><br><span class="line">        &#123;</span><br><span class="line">            _runing = true;</span><br><span class="line">            _thread = new Thread(Check);</span><br><span class="line">            _thread.IsBackground = true;</span><br><span class="line">            _thread.Start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 停止检测</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        public void Stop()</span><br><span class="line">        &#123;</span><br><span class="line">            _runing = false;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                _thread.Abort();</span><br><span class="line">                _thread = null;</span><br><span class="line">            &#125;</span><br><span class="line">            catch &#123; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 开始遍历检测</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        public void Check()</span><br><span class="line">        &#123;</span><br><span class="line">            //Abort线程会使其触发一个ThreadAbortException异常，所以try起来</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                while (_runing)</span><br><span class="line">                &#123;</span><br><span class="line">                    T[] array = _checkOvertimeList.ToArray();</span><br><span class="line">                    foreach (T item in array)</span><br><span class="line">                    &#123;</span><br><span class="line">                        _doCheck(item, _overtime);</span><br><span class="line">                    &#125;</span><br><span class="line">                    Thread.Sleep(_sleepTime);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            catch &#123; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#region 超时处理</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 检查接收超时</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name="userToken"&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;param name="overtime"&gt;&lt;/param&gt;</span><br><span class="line">        private void CheckReceiveOverTime(UserToken userToken, int overtime)</span><br><span class="line">        &#123;</span><br><span class="line">            if ((DateTime.Now - userToken.ReceiveDateTime).TotalMilliseconds &gt; overtime)</span><br><span class="line">            &#123;</span><br><span class="line">                Monitor.Enter(userToken);</span><br><span class="line">                ReceiveOverTime(userToken);</span><br><span class="line">                Monitor.Exit(userToken);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 检查套接字超时</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name="userToken"&gt;&lt;/param&gt;</span><br><span class="line">        private void CheckSocketOverTime(UserToken userToken, int overtime)</span><br><span class="line">        &#123;</span><br><span class="line">            if (overtime == 0)</span><br><span class="line">                return;</span><br><span class="line">            if ((DateTime.Now - userToken.ConnectDateTime).TotalMilliseconds &gt; overtime)</span><br><span class="line">            &#123;</span><br><span class="line">                Monitor.Enter(userToken);</span><br><span class="line">                SocketOverTime(userToken);</span><br><span class="line">                Monitor.Exit(userToken);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 接收超时</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name="userToken"&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;param name="type"&gt;&lt;/param&gt;</span><br><span class="line">        private void ReceiveOverTime(UserToken userToken)</span><br><span class="line">        &#123;</span><br><span class="line">            _receiveOvertimePool.Remove(userToken);</span><br><span class="line">            CloseClientSocket(userToken, CloseSocketReason.ReceiveOvertime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 套接字活动时间超时</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name="userToken"&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;param name="type"&gt;&lt;/param&gt;</span><br><span class="line">        private void SocketOverTime(UserToken userToken)</span><br><span class="line">        &#123;</span><br><span class="line">            CloseClientSocket(userToken, CloseSocketReason.ActiveOverTime);</span><br><span class="line">        &#125;</span><br><span class="line">        #endregion</span><br></pre></td></tr></table></figure></p>
<h2 id="结束">结束</h2><p>有很多非关键的代码没有一一写出来，可以下载完整项目代码查看，<a href="http://www.knna.me/files/iocp.rar">这里下载</a>。</p>
<p>IOCP完成端口框架大致就是如此，是不是也没想象中那么复杂呢，其实高并发、高性能程序的开发，<br>最关键的就是怀着一颗敬畏之心，对敲出的每一行代码慎之又慎，才会有高效的程序。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="IOCP框架核心功能">IOCP框架核心功能</h2><p>上一篇文章把IOCP需要用到的相关功能模块已经封装好了，这章主要编写IOCP的核心功能实现，功能大致如下：]]>
    
    </summary>
    
      <category term="IOCP" scheme="http://www.knna.me/tags/IOCP/"/>
    
      <category term="IOCP高并发框架" scheme="http://www.knna.me/categories/IOCP%E9%AB%98%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOCP完成端口实例（一）]]></title>
    <link href="http://www.knna.me/2015/10/10/IOCP%E5%AE%8C%E6%88%90%E7%AB%AF%E5%8F%A3%E5%AE%9E%E4%BE%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.knna.me/2015/10/10/IOCP完成端口实例（一）/</id>
    <published>2015-10-10T06:52:56.000Z</published>
    <updated>2015-12-30T05:45:06.000Z</updated>
    <content type="html"><![CDATA[<h2 id="IOCP框架">IOCP框架</h2><p>IOCP完成端口我想大家知道的，一个非常有名的高并发处理框架，CLR的线程池也是用IOCP框架编写的。<br>恰好今年公司项目需要开发一套高并发通讯框架，最后选择用IOCP完成端口来做。<br>    现在项目已经上线运行一段时间，这几天准备把框架部分一些实现写出来记录一下，文章中的所有代码<br>为后期根据文章需要重写的，实际项目流程和文章实例代码的流程有所不同，多了几个处理流程，并在重写代码中新增了很多注释。</p>
<h2 id="工作流程">工作流程</h2><p>画了一个大致的工作流程图：<br><img src="/images/iocp/1.jpg" alt="image"><br>代码功能与处理流程将按照此图进行处理。</p>
<h2 id="功能模块">功能模块</h2><p>在IOCP框架中大致划分了几个功能模块：</p>
<blockquote>
<ul>
<li>数据池：保存各种数据对象的集合</li>
<li>内存管理：为缓存对象中的数据进行统一管理，避免运行时的大量内存读写操作</li>
<li>收发缓存：每个客户端都有接收缓存、发送缓存，用来处理粘包、分包。</li>
<li>工作线程：从业务列队依次取出数据进行处理。</li>
<li>超时检测：分别检测了接收超时和客户端生存周期超时。</li>
<li>日志记录：输出提示信息、警告、错误等日志</li>
<li>IOCP框架核心功能</li>
</ul>
</blockquote>
<h2 id="数据池">数据池</h2><p>数据池一共有三种类型，分别运行在不同的场景。</p>
<h3 id="空闲数据池">空闲数据池</h3><p>主要存放初始化时创建好的未使用数据，包括空闲的用户对象，空闲的套接字对象，空闲的业务对象。<br>数据池采用Stack列队承载，Stack的特点是后进先出，性能非常好。代码如下。<br>列队接口代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public interface IQueue&lt;T&gt; where T : class</span><br><span class="line">    &#123;</span><br><span class="line">        int Count &#123; get; &#125;</span><br><span class="line"></span><br><span class="line">        T Pop();</span><br><span class="line"></span><br><span class="line">        void Push(T item);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>列队实现代码:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public class StackPool&lt;T&gt; : IQueue&lt;T&gt; where T : class</span><br><span class="line">    &#123;</span><br><span class="line">        private readonly object _lockObj = new object();</span><br><span class="line">        private Stack&lt;T&gt; _pool;</span><br><span class="line">        private T item;</span><br><span class="line">        private T[] items;</span><br><span class="line"></span><br><span class="line">        public StackPool(int capacity)</span><br><span class="line">        &#123;</span><br><span class="line">            _pool = new Stack&lt;T&gt;(capacity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int Count</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; return _pool.Count; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public T Pop()</span><br><span class="line">        &#123;</span><br><span class="line">            Monitor.Enter(_lockObj);</span><br><span class="line">            item = _pool.Count &gt; 0 ? _pool.Pop() : null;</span><br><span class="line">            Monitor.Exit(_lockObj);</span><br><span class="line">            return item;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void Push(T item)</span><br><span class="line">        &#123;</span><br><span class="line">            if (item == null)</span><br><span class="line">            &#123;</span><br><span class="line">                throw new ArgumentNullException("item不能为null ");</span><br><span class="line">            &#125;</span><br><span class="line">            Monitor.Enter(_lockObj);</span><br><span class="line">            _pool.Push(item);</span><br><span class="line">            Monitor.Exit(_lockObj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public T[] ToArray()</span><br><span class="line">        &#123;</span><br><span class="line">            Monitor.Enter(_lockObj);</span><br><span class="line">            items = _pool.ToArray();</span><br><span class="line">            Monitor.Exit(_lockObj);</span><br><span class="line">            return items;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>我想特别说下代码中的两个点：<br>1、尽量避免在大量调用的方法中使用lock语句来处理线程安全问题，微软提供的这个语法糖有时候真的害人不浅，lock在编译后的代码大致是这样的：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> locked = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    Monitor.Enter(_lockObj,<span class="keyword">ref</span> locked);</span><br><span class="line"><span class="comment">//你的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (locked) Monitor.Exit(_lockObj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>代码被try起来以后，是有性能损失的，在高并发项目代码中，任何一行的代码我们都该慎重。</p>
<p>2、锁定的时候尽量用私有对象来进行锁定，比如new一个object对象。否则可能出现：<br>锁定一个公开对象，独占执行此公开对象的某个锁定方法，导致死锁。</p>
<h3 id="无序数据池">无序数据池</h3><p>用于保存已连接的客户端对象和正在接受数据的客户端对象，内部使用一个HashSet<t>泛型散列集合承载，主要提供入列、移除功能，经测试速度略慢于stack类型，但是也算比较高效的。<br>实现代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 无序唯一值数据池</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;</span><br><span class="line">public class DataPool&lt;T&gt; where T : class</span><br><span class="line">&#123;</span><br><span class="line">    private readonly object _lockObj = new object();</span><br><span class="line">    private HashSet&lt;T&gt; _hashset;</span><br><span class="line">    private T[] items;</span><br><span class="line"></span><br><span class="line">    public DataPool()</span><br><span class="line">    &#123;</span><br><span class="line">        _hashset = new HashSet&lt;T&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void Remove(T item)</span><br><span class="line">    &#123;</span><br><span class="line">        Monitor.Enter(_lockObj);</span><br><span class="line">        _hashset.Remove(item);</span><br><span class="line">        Monitor.Exit(_lockObj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int Count</span><br><span class="line">    &#123;</span><br><span class="line">        get &#123; return _hashset.Count; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void Push(T item)</span><br><span class="line">    &#123;</span><br><span class="line">        Monitor.Enter(_lockObj);</span><br><span class="line">        if (_hashset.Contains(item))</span><br><span class="line">            throw new Exception("准备入列的item已经在列队中");</span><br><span class="line">        _hashset.Add(item);</span><br><span class="line">        Monitor.Exit(_lockObj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T[] ToArray()</span><br><span class="line">    &#123;</span><br><span class="line">        Monitor.Enter(_lockObj);</span><br><span class="line">        items = _hashset.ToArray();</span><br><span class="line">        Monitor.Exit(_lockObj);</span><br><span class="line">        return items;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></t></p>
<h3 id="待处理业务数据池">待处理业务数据池</h3><p>用于存放待处理的业务项，接收线程放入数据，工作线程取出数据并处理，属于生产者-消费者模式，可以用微软的BlockingCollection集合实现，名字可以看出是个阻塞列队，此集合是线程安全的，所以我们不用做线程同步处理了，是不是很方便呢，代码如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">    /// 多线程阻塞队列</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public class BlockingQueue&lt;T&gt; : IQueue&lt;T&gt; where T : class</span><br><span class="line">    &#123;</span><br><span class="line">        BlockingCollection&lt;T&gt; _queue;</span><br><span class="line"></span><br><span class="line">        public BlockingQueue()</span><br><span class="line">        &#123;</span><br><span class="line">            _queue = new BlockingCollection&lt;T&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 未处理数量</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        public int Count</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; return _queue.Count; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 出列一个业务项</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        public T Pop()</span><br><span class="line">        &#123;</span><br><span class="line">            return _queue.Take();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 将待处理业务项放入公共队列</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name="item"&gt;&lt;/param&gt;</span><br><span class="line">        public void Push(T item)</span><br><span class="line">        &#123;</span><br><span class="line">            if (item == null)</span><br><span class="line">                throw new Exception("放入数据池的对象不能为null");</span><br><span class="line">            if (_queue.Contains(item))</span><br><span class="line">                throw new Exception("此对象已经存在数据池");</span><br><span class="line">            //注意：</span><br><span class="line">            //如果执行入列和出列的线程是同一个，可能在列队达到最大数量时，</span><br><span class="line">            //入列代码阻塞线程，导致出列代码无法执行，造成死锁；可以用委托执行入列，但有性能损失。</span><br><span class="line">            //或者不设置列队最大数量，避免达到上限数量（我采用此方法）</span><br><span class="line">            _queue.Add(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="内存管理器">内存管理器</h2><p>在初始化时，为创建对象分配数据内存，所有对象公用一个数据流，只需为他们设置流的偏移量、长度即可。避免了运行时的频繁申请和释放内存，大幅提升性能。代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 内存管理器</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BufferManager</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">//内存空间</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">byte</span>[] _buffer;</span><br><span class="line">       <span class="comment">//总字节</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> _totalBytes;</span><br><span class="line">       <span class="comment">//每次分配的字节数</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> _length;</span><br><span class="line">       <span class="comment">//当前空闲空间的偏移量</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> _offset;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">BufferManager</span>(<span class="params"><span class="keyword">int</span> totalBytes, <span class="keyword">int</span> length</span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           _totalBytes = totalBytes;</span><br><span class="line">           _length = length;</span><br><span class="line">           _offset = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> 申请内存空间</span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InitBuffer</span>(<span class="params"></span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           _buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[_totalBytes];</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> 为对象设置内存空间</span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="item"&gt;</span>需要分配内存的对象<span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="DoSetBuffer"&gt;</span>执行内存分配操作<span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;returns&gt;</span><span class="xmlDocTag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> SetBuffer&lt;T&gt;(T item, Action&lt;T, <span class="keyword">byte</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>&gt; DoSetBuffer)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (_length + _offset &gt; _totalBytes)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"内存不足，请检查配置是否正确"</span>);</span><br><span class="line">           DoSetBuffer(item, _buffer, _offset, _length);</span><br><span class="line">           _offset += _length;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="数据收发缓存包">数据收发缓存包</h2><p>都知道TCP的通讯是无边界的，我在发送和接收数据设置了两个高低位长度字节，通过这两个字节计算出实际数据包的长度，然后再读取后续数据，在缓存包对象中维护了一个当前接收的数据流，每次收到接收请求就计算数据头两个字节，比较接收的总长度是否已经收到一个完整数据包，如果是收到一个完整数据包立即放入处理队列，等待处理。代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="xmlDocTag">///</span> 接收、发送缓存数据管理</span></span><br><span class="line">   <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PackageBuffer</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> 缓存数据</span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">byte</span>[] Buffer;</span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> 当前数据长度</span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">int</span> DataCount;</span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> 数据包头长度</span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> PackageHeaderLength = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">PackageBuffer</span>(<span class="params"><span class="keyword">int</span> size</span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           Buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[size];</span><br><span class="line">           DataCount = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> 获取当前数据长度</span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;returns&gt;</span><span class="xmlDocTag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetDataCount</span>(<span class="params"></span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> DataCount;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> 获取可用空间长度</span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;returns&gt;</span><span class="xmlDocTag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetReserveCount</span>(<span class="params"></span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> Buffer.Length - DataCount;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> 获取缓存流中下一个请求数据包</span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;returns&gt;</span>有新数据请求true<span class="xmlDocTag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">GetFirstPackage</span>(<span class="params"><span class="keyword">ref</span> <span class="keyword">int</span> count</span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (DataCount &lt;= PackageHeaderLength)</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           <span class="keyword">int</span> length = Buffer[<span class="number">0</span>] * <span class="number">256</span> + Buffer[<span class="number">1</span>];</span><br><span class="line">           <span class="keyword">if</span> (length &gt; <span class="number">65535</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//清空数据</span></span><br><span class="line">               DataCount = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (length &gt; DataCount)</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           count = length + PackageHeaderLength;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ClearFirstPackage</span>(<span class="params"></span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (DataCount &lt;= PackageHeaderLength)</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           <span class="keyword">int</span> length = Buffer[<span class="number">0</span>] * <span class="number">256</span> + Buffer[<span class="number">1</span>];</span><br><span class="line">           <span class="keyword">if</span> (length &gt; <span class="number">65535</span> | length &gt;= Buffer.Length)</span><br><span class="line">               DataCount = <span class="number">0</span>;</span><br><span class="line">           Clear(length + PackageHeaderLength);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> 清除所有数据</span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span>(<span class="params"></span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           DataCount = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> 清除指定长度数据</span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="count"&gt;</span><span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span>(<span class="params"><span class="keyword">int</span> count</span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (count &gt;= Buffer.Length)</span><br><span class="line">           &#123;</span><br><span class="line">               DataCount = <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">               System.Buffer.BlockCopy(Buffer, count, Buffer, <span class="number">0</span>, DataCount - count);</span><br><span class="line">               DataCount -= count;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> 设置缓存流长度</span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="size"&gt;</span><span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetBufferSize</span>(<span class="params"><span class="keyword">int</span> size</span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (size &lt;= Buffer.Length)</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           <span class="keyword">byte</span>[] tmp = <span class="keyword">new</span> <span class="keyword">byte</span>[size];</span><br><span class="line">           System.Buffer.BlockCopy(Buffer, <span class="number">0</span>, tmp, <span class="number">0</span>, Buffer.Length);</span><br><span class="line">           Buffer = tmp;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> 写入数据 </span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="buffer"&gt;</span><span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="offset"&gt;</span><span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="count"&gt;</span><span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteBuffer</span>(<span class="params"><span class="keyword">byte</span>[] buffer, <span class="keyword">int</span> offset, <span class="keyword">int</span> count, <span class="keyword">bool</span> addLengthHeader = <span class="keyword">false</span></span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (GetReserveCount() &lt; count)<span class="comment">//申请更多内存</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">int</span> newSize = Buffer.Length + (count * <span class="number">2</span>);</span><br><span class="line">               <span class="keyword">byte</span>[] tmp = <span class="keyword">new</span> <span class="keyword">byte</span>[newSize];</span><br><span class="line">               System.Buffer.BlockCopy(Buffer, <span class="number">0</span>, tmp, <span class="number">0</span>, DataCount);</span><br><span class="line">               Buffer = tmp;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (addLengthHeader)</span><br><span class="line">           &#123;</span><br><span class="line">               Buffer[DataCount] = Convert.ToByte((<span class="keyword">int</span>)(count / <span class="number">256</span>));</span><br><span class="line">               Buffer[DataCount + <span class="number">1</span>] = Convert.ToByte(count % <span class="number">256</span>);</span><br><span class="line">               DataCount += <span class="number">2</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           System.Buffer.BlockCopy(buffer, offset, Buffer, DataCount, count);</span><br><span class="line">           DataCount += count;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteBuffer</span>(<span class="params"><span class="keyword">byte</span>[] buffer</span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           WriteBuffer(buffer, <span class="number">0</span>, buffer.Length);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="工作线程">工作线程</h2><p>工作线程为后台线程，一直在并发的循环获取待处理列队中的数据，这里没有为工作线程池做开始、结束方式。<br>微软的BlockingCollection集合在无数据可处理时会休眠线程，让出CPU时间片。<br>注意：工作线程数尽量不要超过PC中的逻辑线程数，否则会引起额外的线程上下文切换，反而没有提高性能。<br>停止系统时：工作线程将休眠在获取数据的位置，等待系统重新开启，有新数据进入列队时，集合会唤醒线程开始工作。<br>退出系统时：线程自动销毁。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 工作线程池</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class ThreadWorkPool&lt;T&gt; where T : class</span><br><span class="line">&#123;</span><br><span class="line">    //工作线程集合</span><br><span class="line">    private Thread[] _workThread;</span><br><span class="line">    //待处理业务列队</span><br><span class="line">    private IQueue&lt;T&gt; _queue;</span><br><span class="line">    //处理业务方法的委托</span><br><span class="line">    private Func&lt;T, bool&gt; _processWork;</span><br><span class="line">    //处理业务出错时要调用方法的委托</span><br><span class="line">    private Action&lt;T&gt; _doWorkError;</span><br><span class="line"></span><br><span class="line">    public ThreadWorkPool(IQueue&lt;T&gt; queue, int threadNum, Func&lt;T, bool&gt; doWork, Action&lt;T&gt; doWorkError)</span><br><span class="line">    &#123;</span><br><span class="line">        _queue = queue;</span><br><span class="line">        _workThread = new Thread[threadNum];</span><br><span class="line">        _processWork = doWork;</span><br><span class="line">        _doWorkError = doWorkError;</span><br><span class="line">        //初始化并启动所有工作线程</span><br><span class="line">        for (int i = 0; i &lt; threadNum; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            _workThread[i] = new Thread(DoWrok);</span><br><span class="line">            _workThread[i].IsBackground = true;</span><br><span class="line">            _workThread[i].Start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void DoWrok()</span><br><span class="line">    &#123;</span><br><span class="line">        T item = null;</span><br><span class="line">        while (true)</span><br><span class="line">        &#123;</span><br><span class="line">            //并发的从列队中获取一个数据</span><br><span class="line">            item = _queue.Pop();</span><br><span class="line">            if (item == null)</span><br><span class="line">            &#123;</span><br><span class="line">                Globals.WriteLog(IocpLogType.Warning, "业务处理出错，取出的待处理业务项为null ");</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if (_processWork(item) == false)//处理方法返回false表示处理出现错误</span><br><span class="line">            &#123;</span><br><span class="line">                //业务处理失败</span><br><span class="line">                _doWorkError(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="超时检测">超时检测</h2><p>检测了两种超时，一个是数据接收超时，一个是整个客户端生存周期超时。<br>接收超时：在投递接收请求时，将当前客户端加入接收超时检测集合中，超时检测线程将开始判断他的超时时间，若超时，强制下线。收到数据后从超时检测集合中移除。<br>生存周期超时：在客户端连接时，加入已连接客户端集合中，超时检测线程开始判断他的已连接时间是否已经超时，若超时，强制下线。<br>超时检测集合与已连接客户端集合都使用前面的DataPool数据池实现。代码如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">/// 超时检测线程</span><br><span class="line">    public class CheckOverTime&lt;T&gt; where T : UserToken</span><br><span class="line">    &#123;</span><br><span class="line">        //运行状态</span><br><span class="line">        private bool _runing = false;</span><br><span class="line">        //每次检测后的休眠时间</span><br><span class="line">        private int _sleepTime;</span><br><span class="line">        //设定的超时时间</span><br><span class="line">        private int _overtime;</span><br><span class="line">        //超时检测线程</span><br><span class="line">        private Thread _thread;</span><br><span class="line">        //待检测的数据集合</span><br><span class="line">        private DataPool&lt;T&gt; _checkOvertimeList;</span><br><span class="line">        //检测方法的委托</span><br><span class="line">        Action&lt;T, int&gt; _doCheck;</span><br><span class="line"></span><br><span class="line">        public CheckOverTime(int sleepTime, int overtime, DataPool&lt;T&gt; checkOvertimeList, Action&lt;T, int&gt; doCheck)</span><br><span class="line">        &#123;</span><br><span class="line">            _thread = new Thread(Check);</span><br><span class="line">            _thread.IsBackground = true;</span><br><span class="line">            _sleepTime = sleepTime;</span><br><span class="line">            _overtime = overtime;</span><br><span class="line">            _checkOvertimeList = checkOvertimeList;</span><br><span class="line">            _doCheck = doCheck;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 开始检测</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        public void Start()</span><br><span class="line">        &#123;</span><br><span class="line">            _runing = true;</span><br><span class="line">            _thread = new Thread(Check);</span><br><span class="line">            _thread.IsBackground = true;</span><br><span class="line">            _thread.Start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 停止检测</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        public void Stop()</span><br><span class="line">        &#123;</span><br><span class="line">            _runing = false;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                _thread.Abort();</span><br><span class="line">                _thread = null;</span><br><span class="line">            &#125;</span><br><span class="line">            catch &#123; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 开始遍历检测</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        public void Check()</span><br><span class="line">        &#123;</span><br><span class="line">            //Abort线程会使其触发一个ThreadAbortException异常，所以try起来</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                while (_runing)</span><br><span class="line">                &#123;</span><br><span class="line">                    T[] array = _checkOvertimeList.ToArray();</span><br><span class="line">                    foreach (T item in array)</span><br><span class="line">                    &#123;</span><br><span class="line">                        _doCheck(item, _overtime);</span><br><span class="line">                    &#125;</span><br><span class="line">                    Thread.Sleep(_sleepTime);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            catch &#123; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="日志记录">日志记录</h2><p>日志分为三类，普通信息，警告信息，错误信息。代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> 日志记录</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Log</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">object</span> _objLock = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line">        <span class="comment">//日志输出委托</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Action&lt;IocpLogType, <span class="keyword">string</span>&gt; OutputLog;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> 记录</span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="type"&gt;</span>日志类型<span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="msg"&gt;</span>内容<span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteLog</span>(<span class="params">IocpLogType type, <span class="keyword">string</span> msg</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">lock</span> (_objLock)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (OutputLog != <span class="keyword">null</span>)</span><br><span class="line">                    OutputLog(type, msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteLog</span>(<span class="params">IocpLogType type, <span class="keyword">string</span> msg, <span class="keyword">object</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">lock</span> (_objLock)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (OutputLog != <span class="keyword">null</span>)</span><br><span class="line">                    OutputLog(type, <span class="keyword">string</span>.Format(msg, args));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>到这里，IOCP框架需要的相关功能介绍的差不多了，下一章将详细介绍IOCP核心功能实现。<br>项目源码点<a href="http://www.knna.me/files/iocp.rar">这里下载</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="IOCP框架">IOCP框架</h2><p>IOCP完成端口我想大家知道的，一个非常有名的高并发处理框架，CLR的线程池也是用IOCP框架编写的。<br>恰好今年公司项目需要开发一套高并发通讯框架，最后选择用IOCP完成端口来做。<br>    现在项目已经上线运]]>
    </summary>
    
      <category term="IOCP" scheme="http://www.knna.me/tags/IOCP/"/>
    
      <category term="IOCP高并发框架" scheme="http://www.knna.me/categories/IOCP%E9%AB%98%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WPF使用模板自定义控件样式]]></title>
    <link href="http://www.knna.me/2015/09/19/WPF%E4%BD%BF%E7%94%A8%E6%A8%A1%E6%9D%BF%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E6%A0%B7%E5%BC%8F/"/>
    <id>http://www.knna.me/2015/09/19/WPF使用模板自定义控件样式/</id>
    <published>2015-09-19T09:20:04.000Z</published>
    <updated>2015-11-25T02:16:04.000Z</updated>
    <content type="html"><![CDATA[<h2 id="WPF模板">WPF模板</h2><p>在刚刚接触WPF的时候，第一个印象就是非常灵活方便的模板，可以随时重写模板，实现自己想要的效果。winform中要做个复杂点的UI效果相对是比较麻烦的。今天我们自定义树控件，使其支持选中、节点图像等功能。</p>
<h2 id="准备">准备</h2><blockquote>
<ul>
<li>创建个WPF窗体程序项目</li>
<li>下载并配置好Mahapps.Metro的UI库，毕竟是免费的嘛，所以我习惯了随时都用它！</li>
<li>下载Light MVVM组件，在演示调用自定义控件绑定数据时，将使用MVVM模式进行。</li>
</ul>
</blockquote>
<h2 id="开发控件">开发控件</h2><p>新建一个UserControl控件“TreeViewEx”，绑定数据源，订阅选中项改变事件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">TreeView</span> <span class="attribute">Name</span>=<span class="value">"treeView"</span> <span class="attribute">ItemsSource</span>=<span class="value">"&#123;Binding ItemsSource&#125;"</span> <span class="attribute">SelectedItemChanged</span>=<span class="value">"treeView_SelectedItemChanged"</span>&gt;</span></span><br><span class="line">            </span><br><span class="line"><span class="tag">&lt;/<span class="title">TreeView</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>重写TreeView的ItemTemplate模板，新增复选框，节点图像功能。<br>Xaml代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">TreeView.ItemTemplate</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">HierarchicalDataTemplate</span> <span class="attribute">ItemsSource</span>=<span class="value">"&#123;Binding Path=Children&#125;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">StackPanel</span> <span class="attribute">Name</span>=<span class="value">"panel"</span> <span class="attribute">Orientation</span>=<span class="value">"Horizontal"</span> <span class="attribute">Margin</span>=<span class="value">"0,3,5,3"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">CheckBox</span> <span class="attribute">IsChecked</span>=<span class="value">"&#123;Binding Checked,Mode=TwoWay&#125;"</span> <span class="attribute">Margin</span>=<span class="value">"3,0,3,0"</span> <span class="attribute">Click</span>=<span class="value">"CheckBox_Click"</span> <span class="attribute">Visibility</span>=<span class="value">"&#123;Binding ShowCheckBox,ElementName=this,Mode=OneWay&#125;"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">Image</span> <span class="attribute">VerticalAlignment</span>=<span class="value">"Center"</span> <span class="attribute">Source</span>=<span class="value">"&#123;Binding NodeImage&#125;"</span> <span class="attribute">Width</span>=<span class="value">"16"</span> <span class="attribute">Height</span>=<span class="value">"16"</span> <span class="attribute">Margin</span>=<span class="value">"0,0,3,0"</span> <span class="attribute">Visibility</span>=<span class="value">"&#123;Binding ShowNodeImage,ElementName=this,Mode=OneWay&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="title">Image</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">TextBlock</span> <span class="attribute">VerticalAlignment</span>=<span class="value">"Center"</span> <span class="attribute">Text</span>=<span class="value">"&#123;Binding Content,Mode=TwoWay&#125;"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">TextBlock.ToolTip</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="title">TextBlock</span> <span class="attribute">VerticalAlignment</span>=<span class="value">"Center"</span> <span class="attribute">Text</span>=<span class="value">"&#123;Binding Content&#125;"</span> <span class="attribute">TextWrapping</span>=<span class="value">"Wrap"</span> <span class="attribute">MaxWidth</span>=<span class="value">"200"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="title">TextBlock.ToolTip</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">TextBlock</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">StackPanel</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">HierarchicalDataTemplate</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">TreeView.ItemTemplate</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>后台代码中，首先将treeview控件的数据源设置为当前对象，创建依赖属性，用于外部获取数据绑定。<br>然后在复选框状态改变事件中根据用户配置是否允许节点递归检查勾选子项或父项。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">region</span> 属性</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">TreeViewEx</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    ShowCheckBoxProperty =</span><br><span class="line">    DependencyProperty.Register(<span class="string">"ShowCheckBox"</span>, <span class="keyword">typeof</span>(Visibility), <span class="keyword">typeof</span>(TreeViewEx), <span class="keyword">new</span> FrameworkPropertyMetadata(Visibility.Collapsed));</span><br><span class="line"></span><br><span class="line">    ShowNodeImageProperty =</span><br><span class="line">        DependencyProperty.Register(<span class="string">"ShowNodeImage"</span>, <span class="keyword">typeof</span>(Visibility), <span class="keyword">typeof</span>(TreeViewEx), <span class="keyword">new</span> FrameworkPropertyMetadata(Visibility.Collapsed));</span><br><span class="line"></span><br><span class="line">    ItemsSourceProperty =</span><br><span class="line">        DependencyProperty.Register(<span class="string">"ItemsSource"</span>, <span class="keyword">typeof</span>(IEnumerable), <span class="keyword">typeof</span>(TreeViewEx));</span><br><span class="line"></span><br><span class="line">    SelectedItemProperty =</span><br><span class="line">         DependencyProperty.Register(<span class="string">"SelectedItem"</span>, <span class="keyword">typeof</span>(<span class="keyword">object</span>), <span class="keyword">typeof</span>(TreeViewEx));</span><br><span class="line"></span><br><span class="line">    AllowRecursiveNodeCheckingProperty =</span><br><span class="line">        DependencyProperty.Register(<span class="string">"AllowRecursiveNodeChecking"</span>, <span class="keyword">typeof</span>(<span class="keyword">bool</span>), <span class="keyword">typeof</span>(TreeViewEx), <span class="keyword">new</span> FrameworkPropertyMetadata(<span class="keyword">false</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty ItemsSourceProperty;</span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 数据源</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> IEnumerable ItemsSource</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> (IEnumerable)GetValue(ItemsSourceProperty); &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetValue(ItemsSourceProperty, <span class="keyword">value</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty SelectedItemProperty;</span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 选择的对象</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">object</span> SelectedItem</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> (<span class="keyword">object</span>)GetValue(SelectedItemProperty); &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetValue(SelectedItemProperty, <span class="keyword">value</span>);</span><br><span class="line">        <span class="comment">//设置为选中</span></span><br><span class="line">        TreeViewItem item = GetItem(<span class="keyword">value</span>, <span class="keyword">null</span>, treeView.Items);</span><br><span class="line">        <span class="keyword">if</span> (item != <span class="keyword">null</span>)</span><br><span class="line">            item.IsSelected = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据数据对象获取节点TreeViewItem对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> TreeViewItem <span class="title">GetItem</span>(<span class="params"><span class="keyword">object</span> val, TreeViewItem parentItem, ItemCollection items</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (parentItem != <span class="keyword">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">object</span> item <span class="keyword">in</span> items)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (val.Equals(item))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> temp = parentItem.ItemContainerGenerator.ContainerFromItem(val) <span class="keyword">as</span> TreeViewItem;</span><br><span class="line">                <span class="keyword">if</span> (temp != <span class="keyword">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> item2 = parentItem.ItemContainerGenerator.ContainerFromItem(item) <span class="keyword">as</span> TreeViewItem;</span><br><span class="line">            <span class="keyword">if</span> (item2 == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">var</span> result = GetItem(val, item2, item2.Items);</span><br><span class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">object</span> item <span class="keyword">in</span> items)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (val.Equals(item))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> temp = treeView.ItemContainerGenerator.ContainerFromItem(val) <span class="keyword">as</span> TreeViewItem;</span><br><span class="line">                <span class="keyword">if</span> (temp != <span class="keyword">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> item2 = treeView.ItemContainerGenerator.ContainerFromItem(item) <span class="keyword">as</span> TreeViewItem;</span><br><span class="line">            <span class="keyword">if</span> (item2 == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">var</span> result = GetItem(val, item2, item2.Items);</span><br><span class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty ShowCheckBoxProperty;</span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 是否显示选择框</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> Visibility ShowCheckBox</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> (Visibility)GetValue(ShowCheckBoxProperty); &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetValue(ShowCheckBoxProperty, <span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty ShowNodeImageProperty;</span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 是否显示节点图标</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> Visibility ShowNodeImage</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> (Visibility)GetValue(ShowNodeImageProperty); &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetValue(ShowNodeImageProperty, <span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty AllowRecursiveNodeCheckingProperty;</span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 允许节点递归检查</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">bool</span> AllowRecursiveNodeChecking</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> (<span class="keyword">bool</span>)GetValue(AllowRecursiveNodeCheckingProperty); &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetValue(AllowRecursiveNodeCheckingProperty, <span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">region</span> 节点控制</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CheckBox_Click</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (AllowRecursiveNodeChecking == <span class="keyword">false</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//设置父节点和子节点的选中状态</span></span><br><span class="line">    CheckBox ck = sender <span class="keyword">as</span> CheckBox;</span><br><span class="line">    <span class="keyword">object</span> instance = ck.DataContext;</span><br><span class="line">    SetChildrenCheck(instance);</span><br><span class="line">    SetParentCheck(instance, ItemsSource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 设置子节点的选中状态</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetChildrenCheck</span>(<span class="params"><span class="keyword">object</span> instance</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    Type type = instance.GetType();</span><br><span class="line"></span><br><span class="line">    PropertyInfo property = type.GetProperty(<span class="string">"Children"</span>);</span><br><span class="line">    <span class="keyword">if</span> (property == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    IEnumerable children = property.GetValue(instance, <span class="keyword">null</span>) <span class="keyword">as</span> IEnumerable;</span><br><span class="line">    <span class="keyword">if</span> (children == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    PropertyInfo propertyCheck = type.GetProperty(<span class="string">"Checked"</span>);</span><br><span class="line">    <span class="keyword">if</span> (propertyCheck == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">bool</span> nodeCheck = (<span class="keyword">bool</span>)propertyCheck.GetValue(instance, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> children)</span><br><span class="line">    &#123;</span><br><span class="line">        type.GetProperty(<span class="string">"Checked"</span>).SetValue(item, nodeCheck, <span class="keyword">null</span>);</span><br><span class="line">        SetChildrenCheck(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 设置父节点的选中状态</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">SetParentCheck</span>(<span class="params"><span class="keyword">object</span> clickNode, IEnumerable clickNodeChildren</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> clickNodeChildren)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.Equals(clickNode))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Type itemtype = item.GetType();</span><br><span class="line">        PropertyInfo property = itemtype.GetProperty(<span class="string">"Children"</span>);</span><br><span class="line">        <span class="keyword">if</span> (property == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        IEnumerable itemChildren = property.GetValue(item, <span class="keyword">null</span>) <span class="keyword">as</span> IEnumerable;</span><br><span class="line">        <span class="keyword">if</span> (itemChildren == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> result = SetParentCheck(clickNode, itemChildren);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> checkTrue = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> checkUnknow = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> checkFalse = <span class="number">0</span>;</span><br><span class="line">            PropertyInfo itemCheckProperty = itemtype.GetProperty(<span class="string">"Checked"</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item2 <span class="keyword">in</span> itemChildren)</span><br><span class="line">            &#123;</span><br><span class="line">                PropertyInfo item2CheckProperty = item2.GetType().GetProperty(<span class="string">"Checked"</span>);</span><br><span class="line">                <span class="keyword">bool</span>? item2Check = (<span class="keyword">bool</span>?)item2CheckProperty.GetValue(item2, <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (item2Check == <span class="keyword">true</span>)</span><br><span class="line">                    checkTrue++;</span><br><span class="line">                <span class="keyword">if</span> (item2Check == <span class="keyword">null</span>)</span><br><span class="line">                    checkUnknow++;</span><br><span class="line">                <span class="keyword">if</span> (item2Check == <span class="keyword">false</span>)</span><br><span class="line">                    checkFalse++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (checkFalse == <span class="number">0</span> &amp;&amp; checkUnknow == <span class="number">0</span>)</span><br><span class="line">                itemCheckProperty.SetValue(item, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">checkTrue == <span class="number">0</span> &amp;&amp; checkUnknow == <span class="number">0</span></span>)</span><br><span class="line">                itemCheckProperty.<span class="title">SetValue</span>(<span class="params">item, <span class="keyword">false</span>, <span class="keyword">null</span></span>)</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                itemCheckProperty.SetValue(item, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="使用控件">使用控件</h2><p>在WPF主窗体XAML代码中，引用控件所在的命名空间，并调用此控件，绑定数据<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">localControls:TreeViewEx</span> <span class="attribute">Grid.Row</span>=<span class="value">"1"</span> <span class="attribute">Margin</span>=<span class="value">"5"</span> <span class="attribute">ShowCheckBox</span>=<span class="value">"Visible"</span> <span class="attribute">ShowNodeImage</span>=<span class="value">"Visible"</span> <span class="attribute">SelectedItem</span>=<span class="value">"&#123;Binding SelectedItem&#125;"</span></span><br><span class="line">                                  <span class="attribute">ItemsSource</span>=<span class="value">"&#123;Binding ListItems&#125;"</span> <span class="attribute">AllowRecursiveNodeChecking</span>=<span class="value">"True"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>创建一个绑定到树控件的数据实体类。<br>注意，绑定到树的对象需要含有Content、NodeImage和Checked字段。所以我用了一个接口来限定。<br>接口代码<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 使用自定义树控件的数据源对象需要实现此接口</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ITreeView</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> 选择状态</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">bool</span> Checked &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> 节点图像</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    BitmapImage NodeImage &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> 显示内容</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">string</span> Content &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>实体代码<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class TreeItem : ModelBase, ITreeView</span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">       private bool _checked;</span><br><span class="line">       public bool Checked</span><br><span class="line">       &#123;</span><br><span class="line">           get &#123; return _checked; &#125;</span><br><span class="line">           set &#123; UpdateProperty(ref _checked, value, "Checked"); &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       private BitmapImage _nodeImage;</span><br><span class="line">       public BitmapImage NodeImage</span><br><span class="line">       &#123;</span><br><span class="line">           get &#123; return _nodeImage; &#125;</span><br><span class="line">           set &#123; UpdateProperty(ref _nodeImage, value, "NodeImage"); &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       private string _content;</span><br><span class="line">       public string Content</span><br><span class="line">       &#123;</span><br><span class="line">           get &#123; return _content; &#125;</span><br><span class="line">           set &#123; UpdateProperty(ref _content, value, "Content"); &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 子项</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       private ObservableCollection&lt;TreeItem&gt; _Children;</span><br><span class="line">       public ObservableCollection&lt;TreeItem&gt; Children</span><br><span class="line">       &#123;</span><br><span class="line">           get &#123; return _Children; &#125;</span><br><span class="line">           set &#123; UpdateProperty(ref _Children, value, "Children"); &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>创建了一个模型类，并且在窗体后台代码中将模型类的实例作为窗体数据源<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainWindowModel</span> : <span class="title">ModelBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainWindowModel</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        BitmapImage parentImg = GetImage(<span class="string">"foodmarket.png"</span>);</span><br><span class="line">        BitmapImage childImg = GetImage(<span class="string">"booth.jpg"</span>);</span><br><span class="line">        ListItems = <span class="keyword">new</span> ObservableCollection&lt;TreeItem&gt;() &#123; <span class="keyword">new</span> TreeItem() &#123; Content = <span class="string">"父节点1"</span> ,NodeImage=parentImg</span><br><span class="line">            ,Children=<span class="keyword">new</span> ObservableCollection&lt;TreeItem&gt;()&#123;<span class="keyword">new</span> TreeItem()&#123;Content=<span class="string">"子节点"</span>,NodeImage=childImg&#125;&#125;&#125;, </span><br><span class="line">            <span class="keyword">new</span> TreeItem() &#123; Content = <span class="string">"父节点2"</span> ,NodeImage=parentImg&#125; &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ObservableCollection&lt;TreeItem&gt; _listItems;</span><br><span class="line">    <span class="keyword">public</span> ObservableCollection&lt;TreeItem&gt; ListItems</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _listItems; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; UpdateProperty(<span class="keyword">ref</span> _listItems, <span class="keyword">value</span>, <span class="string">"ListItems"</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeItem _selectedItem;</span><br><span class="line">    <span class="keyword">public</span> TreeItem SelectedItem</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _selectedItem; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; UpdateProperty(<span class="keyword">ref</span> _selectedItem, <span class="keyword">value</span>, <span class="string">"SelectedItem"</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">BitmapImage <span class="title">GetImage</span>(<span class="params"><span class="keyword">string</span> imgName</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> path = AppDomain.CurrentDomain.BaseDirectory + <span class="string">"Images/"</span> + imgName;</span><br><span class="line">        <span class="keyword">if</span> (!File.Exists(path))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        MemoryStream ms = <span class="keyword">new</span> MemoryStream(File.ReadAllBytes(path));</span><br><span class="line">        BitmapImage image = <span class="keyword">new</span> BitmapImage();</span><br><span class="line">        image.BeginInit();</span><br><span class="line">        image.StreamSource = ms;</span><br><span class="line">        image.EndInit();</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>完成后的效果图：<br><img src="/images/wpf/2.gif" alt="image"></p>
<p>在此控件上还可以拓展更多的功能，比如多字段显示功能，增加几个列，调用反射来获取所有字段的值，并一一展示，在DEV（一个收费的第三方UI库）控件库中，有个树控件就实现了类似的功能。</p>
<p>示例源码点击<a href="http://www.knna.me/files/wpftemplatedemo.rar">这里下载</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="WPF模板">WPF模板</h2><p>在刚刚接触WPF的时候，第一个印象就是非常灵活方便的模板，可以随时重写模板，实现自己想要的效果。winform中要做个复杂点的UI效果相对是比较麻烦的。今天我们自定义树控件，使其支持选中、节点图像等功能。</p>
<h2 i]]>
    </summary>
    
      <category term="WPF" scheme="http://www.knna.me/tags/WPF/"/>
    
      <category term="模板" scheme="http://www.knna.me/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="自定义控件" scheme="http://www.knna.me/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
      <category term="DotNet技术" scheme="http://www.knna.me/categories/DotNet%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WPF使用Mahapps.Metro开源UI组件]]></title>
    <link href="http://www.knna.me/2015/09/18/WPF%E4%BD%BF%E7%94%A8Mahapps-Metro%E5%BC%80%E6%BA%90UI%E7%BB%84%E4%BB%B6/"/>
    <id>http://www.knna.me/2015/09/18/WPF使用Mahapps-Metro开源UI组件/</id>
    <published>2015-09-18T10:59:34.000Z</published>
    <updated>2015-11-25T02:17:16.000Z</updated>
    <content type="html"><![CDATA[<p>在WPF的开发中，我常常使用一个叫Mahapps.Metro的开源UI库，他几乎重写了所有的WPF控件，并且在动画效果，UI交互，数据绑定方面表现很好，我介绍一下用法：</p>
<h2 id="下载">下载</h2><p>新建一个WPF项目，在引用点击管理NuGet程序包，搜索Mahapps，下载Mahapps.Metro。</p>
<h2 id="配置">配置</h2><p>打开App.xaml，配置全局资源文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Application</span> <span class="attribute">x:Class</span>=<span class="value">"WpfMahappDemo.App"</span></span><br><span class="line">             <span class="attribute">xmlns</span>=<span class="value">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></span><br><span class="line">             <span class="attribute">xmlns:x</span>=<span class="value">"http://schemas.microsoft.com/winfx/2006/xaml"</span></span><br><span class="line">             <span class="attribute">StartupUri</span>=<span class="value">"MainWindow.xaml"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Application.Resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ResourceDictionary</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">ResourceDictionary.MergedDictionaries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">ResourceDictionary</span> <span class="attribute">Source</span>=<span class="value">"pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">ResourceDictionary</span> <span class="attribute">Source</span>=<span class="value">"pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">ResourceDictionary</span> <span class="attribute">Source</span>=<span class="value">"pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">ResourceDictionary</span> <span class="attribute">Source</span>=<span class="value">"pack://application:,,,/MahApps.Metro;component/Styles/Accents/Orange.xaml"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">ResourceDictionary</span> <span class="attribute">Source</span>=<span class="value">"pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">ResourceDictionary</span> <span class="attribute">Source</span>=<span class="value">"pack://application:,,,/MahApps.Metro;component/Styles/FlatButton.xaml"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">ResourceDictionary</span> <span class="attribute">Source</span>=<span class="value">"pack://application:,,,/MahApps.Metro;component/Styles/Controls.AnimatedSingleRowTabControl.xaml"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">ResourceDictionary</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">FontFamily</span> <span class="attribute">x:Key</span>=<span class="value">"DefaultFont"</span>&gt;</span></span><br><span class="line">                        Microsoft YaHei</span><br><span class="line">                    <span class="tag">&lt;/<span class="title">FontFamily</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">ResourceDictionary</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">ResourceDictionary.MergedDictionaries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">ResourceDictionary</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">Application.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">Application</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="使用">使用</h2><p>1.首先在窗体XAML代码中引入Mahapps UI库的命名空间<br>2.将继承的窗体类型从Window改为UI库中的MetroWindow，后台代码也需要改掉。<br>3.在XAML代码中设置GlowBrush属性，否则窗体没有边框。<br>4.在窗体中使用了个DataGrid控件。<br>XAML代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">controls:MetroWindow</span> <span class="attribute">x:Class</span>=<span class="value">"WpfMahappDemo.MainWindow"</span></span><br><span class="line">        <span class="attribute">xmlns:controls</span>=<span class="value">"http://metro.mahapps.com/winfx/xaml/controls"</span></span><br><span class="line">        <span class="attribute">GlowBrush</span>=<span class="value">"&#123;DynamicResource AccentColorBrush&#125;"</span></span><br><span class="line">        <span class="attribute">xmlns</span>=<span class="value">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></span><br><span class="line">        <span class="attribute">xmlns:x</span>=<span class="value">"http://schemas.microsoft.com/winfx/2006/xaml"</span></span><br><span class="line">        <span class="attribute">Title</span>=<span class="value">"Mahapps UI库Demo"</span> <span class="attribute">Height</span>=<span class="value">"350"</span> <span class="attribute">Width</span>=<span class="value">"525"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">DataGrid</span> <span class="attribute">Margin</span>=<span class="value">"5"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">DataGrid.Columns</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">DataGridTextColumn</span> <span class="attribute">Header</span>=<span class="value">"姓名"</span> <span class="attribute">Binding</span>=<span class="value">"&#123;Binding Name&#125;"</span> <span class="attribute">Width</span>=<span class="value">"100"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">DataGridTextColumn</span> <span class="attribute">Header</span>=<span class="value">"年龄"</span> <span class="attribute">Binding</span>=<span class="value">"&#123;Binding Age&#125;"</span> <span class="attribute">Width</span>=<span class="value">"100"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">DataGrid.Columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">DataGrid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">controls:MetroWindow</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>后台代码<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">MetroWindow</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            InitializeComponent(); </span><br><span class="line">            ListItems = <span class="keyword">new</span> List&lt;Student&gt;() &#123; <span class="keyword">new</span> Student() &#123; Name = <span class="string">"张三"</span>, Age = <span class="number">15</span> &#125;, <span class="keyword">new</span> Student() &#123; Name = <span class="string">"李四"</span>, Age = <span class="number">16</span> &#125;, <span class="keyword">new</span> Student() &#123; Name = <span class="string">"王五"</span>, Age = <span class="number">19</span> &#125; &#125;;</span><br><span class="line">            <span class="keyword">this</span>.DataContext = <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="preprocessor">#<span class="keyword">region</span> 属性</span></span><br><span class="line">        <span class="keyword">private</span> List&lt;Student&gt; _listItems;</span><br><span class="line">        <span class="comment">//数据列表，没有属性通知功能</span></span><br><span class="line">        <span class="keyword">public</span> List&lt;Student&gt; ListItems</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _listItems; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _listItems = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="preprocessor">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"姓名："</span> + Name + <span class="string">"，年龄："</span> + Age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到我们没有为的DataGrid控件设置任何样式，但已经不是WPF默认样式了，并且在显示窗体的时候，控件还新增了滑动效果，<br>其它控件使用方法一样，这些都是Mahapps UI库的功劳，因为我们在APP.XAML文件已经全局应用了所有控件样式。<br>可以进入<a href="http://Mahapps.com" target="_blank" rel="external">Mahapps官网</a>查看更多信息。</p>
<h2 id="源码">源码</h2><blockquote>
<ul>
<li>示例源码点击<a href="http://www.knna.me/files/wpfmahappdemo.rar">这里下载</a>。</li>
<li>开源UI库源码点击<a href="http://www.knna.me/files/mahapps.rar">这里下载</a>。</li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>在WPF的开发中，我常常使用一个叫Mahapps.Metro的开源UI库，他几乎重写了所有的WPF控件，并且在动画效果，UI交互，数据绑定方面表现很好，我介绍一下用法：</p>
<h2 id="下载">下载</h2><p>新建一个WPF项目，在引用点击管理NuGet程序包，]]>
    </summary>
    
      <category term="Mahapps.Metro" scheme="http://www.knna.me/tags/Mahapps-Metro/"/>
    
      <category term="WPF" scheme="http://www.knna.me/tags/WPF/"/>
    
      <category term="DotNet技术" scheme="http://www.knna.me/categories/DotNet%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WPF使用MVVM模式开发实例]]></title>
    <link href="http://www.knna.me/2015/09/16/WPF%E4%BD%BF%E7%94%A8MVVM%E6%A8%A1%E5%BC%8F%E5%BC%80%E5%8F%91%E5%AE%9E%E4%BE%8B/"/>
    <id>http://www.knna.me/2015/09/16/WPF使用MVVM模式开发实例/</id>
    <published>2015-09-16T02:58:22.000Z</published>
    <updated>2015-11-25T02:16:06.000Z</updated>
    <content type="html"><![CDATA[<h2 id="WPF">WPF</h2><p>在客户对UI体验要求越来越高的今天，很多的公司和开发人员开始使用WPF进行开发，WPF的优势在哪里呢。列出我使用中体会比较深的一些点：</p>
<blockquote>
<ul>
<li>WPF提供非常漂亮的UI交互，基于WPF提供的模板还可以方便的进行自定义控件的开发，比winform实在方便很多。</li>
<li>界面使用XAML标记语言进行布局，可让界面、逻辑分离，让专业的人做专业的事。实际上一般情况下都是一个人完成前端和后端的。。。<br>  并且XAML标记语提供了丰富而灵活的布局机制，熟悉以后布局将比winform更加得心应手。</li>
<li>WPF中的虚拟DPI，WPF设计程序不会在低分屏中显示的很大，而在高分屏中显示很小。</li>
<li>数据绑定与命令机制，可以让我们很好的将业务代码、前端代码分离，轻松实现解耦。</li>
</ul>
</blockquote>
<h2 id="命令">命令</h2><p>要使用命令，必须了解ICommand接口，所有的命令都需要实现此接口。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICommand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"><span class="keyword">object</span> parameter</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">CanExecute</span>(<span class="params"><span class="keyword">object</span> parameter</span>)</span>;</span><br><span class="line">    <span class="keyword">event</span> EventHandler CanExecuteChanged;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>自己在用命令的时候不会直接实现ICommand接口，而是使用已经实现了此接口的RoutedCommand类型，他是WPF中唯一一个实现了ICommand接口的类型，所有的命令都是通过RoutedCommand或者他的派生类实现的。<br>方式一：后台绑定，前后端代码高耦合<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RoutedCommand cmd = <span class="keyword">new</span> RoutedCommand(<span class="string">"CommandTest"</span>, <span class="keyword">typeof</span>(MainWindow));</span><br><span class="line">CommandBinding cb = <span class="keyword">new</span> CommandBinding();</span><br><span class="line">cb.Command = cmd;</span><br><span class="line">cb.CanExecute += cb_CanExecute;</span><br><span class="line">cb.Executed += cb_Executed;</span><br><span class="line"><span class="keyword">this</span>.CommandBindings.Add(cb);</span><br><span class="line">btnTest.Command = cmd;</span><br></pre></td></tr></table></figure></p>
<p>方式二：前端绑定，降低了耦合程度<br>命令<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CommandDemo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> RoutedUICommand cmd;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">CommandDemo</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="comment">//设置快捷键 Ctrl+R触发</span></span><br><span class="line">            InputGestureCollection inputs = <span class="keyword">new</span> InputGestureCollection();</span><br><span class="line">            inputs.Add(<span class="keyword">new</span> KeyGesture(Key.R, ModifierKeys.Control, <span class="string">"Ctrl+R"</span>));</span><br><span class="line">            cmd = <span class="keyword">new</span> RoutedUICommand(<span class="string">"Cmd"</span>, <span class="string">"Cmd"</span>, <span class="keyword">typeof</span>(CommandDemo), inputs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> RoutedUICommand Command</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> cmd; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>前台绑定<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;Window x:Class=<span class="string">"WpfDemo1.MainWindow"</span></span><br><span class="line">        xmlns=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></span><br><span class="line">        xmlns:x=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml"</span></span><br><span class="line">        xmlns:local=<span class="string">"clr-namespace:WpfDemo1"</span></span><br><span class="line">        Title=<span class="string">"WPF功能演示"</span> Height=<span class="string">"350"</span> Width=<span class="string">"525"</span>&gt;</span><br><span class="line">    &lt;Window.CommandBindings&gt;</span><br><span class="line">        &lt;CommandBinding Command=<span class="string">"local:CommandDemo.Command"</span> Executed=<span class="string">"CommandBinding_Executed"</span>&gt;&lt;/CommandBinding&gt;</span><br><span class="line">    &lt;/Window.CommandBindings&gt;</span><br><span class="line">    &lt;Grid&gt;</span><br><span class="line">        &lt;Grid.RowDefinitions&gt;</span><br><span class="line">            &lt;RowDefinition Height=<span class="string">"auto"</span>/&gt;</span><br><span class="line">            &lt;RowDefinition Height=<span class="string">"*"</span>/&gt;</span><br><span class="line">        &lt;/Grid.RowDefinitions&gt;</span><br><span class="line">        &lt;TextBlock Text=<span class="string">"演示命令绑定"</span>&gt;&lt;/TextBlock&gt;</span><br><span class="line">        &lt;StackPanel Orientation=<span class="string">"Horizontal"</span> Grid.Row=<span class="string">"1"</span> VerticalAlignment=<span class="string">"Top"</span>&gt;</span><br><span class="line">            &lt;Button Name=<span class="string">"btnTest"</span> Width=<span class="string">"90"</span> Height=<span class="string">"30"</span> Grid.Row=<span class="string">"1"</span> Content=<span class="string">"后台绑定"</span>/&gt;</span><br><span class="line">            &lt;Button Width=<span class="string">"90"</span> Height=<span class="string">"30"</span> Grid.Row=<span class="string">"1"</span> Content=<span class="string">"前端绑定"</span> Command=<span class="string">"local:CommandDemo.Command"</span>/&gt;</span><br><span class="line">        &lt;/StackPanel&gt;</span><br><span class="line">    &lt;/Grid&gt;</span><br><span class="line">&lt;/Window&gt;</span><br></pre></td></tr></table></figure></p>
<p>方式三：使用Mvvm Light组件实现命令绑定，完全解耦<br>在项目引用中右键选择管理Nuget程序包，搜索Mvvm Light，下载Mvvm Light libraries only组件，实现代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WindCommand</span>(<span class="params"></span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           InitializeComponent();</span><br><span class="line">           <span class="keyword">this</span>.Loaded += MainWindow_Loaded;</span><br><span class="line">           <span class="comment">//需要将数据上下文设置为自身，binding绑定需要在数据上下文中找到绑定项</span></span><br><span class="line">           <span class="keyword">this</span>.DataContext = <span class="keyword">this</span>;</span><br><span class="line">           MvvmCmd = <span class="keyword">new</span> GalaSoft.MvvmLight.Command.RelayCommand(ExeCommand, CanExeCommand);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="preprocessor">#<span class="keyword">region</span> Mvvm Light组件实现命令</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> GalaSoft.MvvmLight.Command.RelayCommand MvvmCmd &#123;<span class="keyword">get</span>;<span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//命令可用性，此方法不是构造RelayCommand必须的</span></span><br><span class="line">       <span class="function"><span class="keyword">bool</span> <span class="title">CanExeCommand</span>(<span class="params"></span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//执行命令</span></span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">ExeCommand</span>(<span class="params"></span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           MessageBox.Show(<span class="string">"Mvvm Light组件实现命令已执行"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="preprocessor">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="数据绑定">数据绑定</h2><p>为了将前端与后端代码解耦，我们新建一个类文件用于窗体的业务逻辑编写。首先新建一个用于MVVM模式开发的窗体，再新建一个类。<br>类文件代码，第一个是模型类的基类，封装了属性通知方法，第二个是模型类。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ModelBase</span>:<span class="title">ViewModelBase</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> UpdateProperty&lt;T&gt;(<span class="keyword">ref</span> T properValue, T newValue, <span class="keyword">string</span> properName)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">object</span>.Equals(properValue, newValue))</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">           properValue = newValue;</span><br><span class="line">           RaisePropertyChanged(properName);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WindDataBindingModel</span> : <span class="title">ModelBase</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="preprocessor">#<span class="keyword">region</span> 构造</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">WindDataBindingModel</span>(<span class="params"></span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           Refresh = <span class="keyword">new</span> RelayCommand(ExeRefresh);</span><br><span class="line">           InitData();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">InitData</span>(<span class="params"></span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           ListItems = <span class="keyword">new</span> ObservableCollection&lt;Student&gt;() &#123; <span class="keyword">new</span> Student() &#123; Name = <span class="string">"张三"</span>, Age = <span class="number">15</span> &#125;, <span class="keyword">new</span> Student() &#123; Name = <span class="string">"李四"</span>, Age = <span class="number">16</span> &#125;, <span class="keyword">new</span> Student() &#123; Name = <span class="string">"王五"</span>, Age = <span class="number">19</span> &#125; &#125;;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="preprocessor">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">       <span class="preprocessor">#<span class="keyword">region</span> 属性</span></span><br><span class="line">       <span class="keyword">private</span> ObservableCollection&lt;Student&gt; _listItems;</span><br><span class="line">       <span class="keyword">public</span> ObservableCollection&lt;Student&gt; ListItems</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">get</span> &#123; <span class="keyword">return</span> _listItems; &#125;</span><br><span class="line">           <span class="keyword">set</span> &#123; UpdateProperty(<span class="keyword">ref</span> _listItems, <span class="keyword">value</span>, <span class="string">"ListItems"</span>); &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> Student _selectedItem;</span><br><span class="line">       <span class="keyword">public</span> Student SelectedItem</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">get</span> &#123; <span class="keyword">return</span> _selectedItem; &#125;</span><br><span class="line">           <span class="keyword">set</span> &#123; UpdateProperty(<span class="keyword">ref</span> _selectedItem, <span class="keyword">value</span>, <span class="string">"SelectedItem"</span>); &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="preprocessor">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">       <span class="preprocessor">#<span class="keyword">region</span> 命令</span></span><br><span class="line">       <span class="keyword">public</span> RelayCommand Refresh &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">ExeRefresh</span>(<span class="params"></span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           ListItems.Add(<span class="keyword">new</span> Student() &#123; Name = <span class="string">"新增数据"</span>, Age = <span class="number">100</span> &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="preprocessor">#<span class="keyword">endregion</span></span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"姓名："</span> + Name + <span class="string">"，年龄："</span> + Age;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>窗体XAML代码，在控件上直接bingding绑定数据源<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">RowDefinition</span> <span class="attribute">Height</span>=<span class="value">"auto"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">RowDefinition</span> <span class="attribute">Height</span>=<span class="value">"*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">StackPanel</span> <span class="attribute">Orientation</span>=<span class="value">"Horizontal"</span> <span class="attribute">Margin</span>=<span class="value">"5"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">TextBlock</span> <span class="attribute">Text</span>=<span class="value">"当前选中项"</span> <span class="attribute">Margin</span>=<span class="value">"5"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">TextBlock</span> <span class="attribute">Text</span>=<span class="value">"&#123;Binding SelectedItem&#125;"</span> <span class="attribute">Width</span>=<span class="value">"200"</span> <span class="attribute">Margin</span>=<span class="value">"5"</span> <span class="attribute">Foreground</span>=<span class="value">"Gray"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">Button</span> <span class="attribute">Content</span>=<span class="value">"刷新数据"</span> <span class="attribute">Command</span>=<span class="value">"&#123;Binding Refresh&#125;"</span> <span class="attribute">Width</span>=<span class="value">"90"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">StackPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">DataGrid</span> <span class="attribute">Grid.Row</span>=<span class="value">"1"</span> <span class="attribute">AutoGenerateColumns</span>=<span class="value">"False"</span> <span class="attribute">IsReadOnly</span>=<span class="value">"True"</span> <span class="attribute">ItemsSource</span>=<span class="value">"&#123;Binding ListItems&#125;"</span> <span class="attribute">SelectedItem</span>=<span class="value">"&#123;Binding SelectedItem&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">DataGrid.Columns</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">DataGridTextColumn</span> <span class="attribute">Header</span>=<span class="value">"名字"</span> <span class="attribute">Binding</span>=<span class="value">"&#123;Binding Name&#125;"</span> <span class="attribute">Width</span>=<span class="value">"100"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">DataGridTextColumn</span> <span class="attribute">Header</span>=<span class="value">"年龄"</span> <span class="attribute">Binding</span>=<span class="value">"&#123;Binding Age&#125;"</span> <span class="attribute">Width</span>=<span class="value">"100"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">DataGrid.Columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">DataGrid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>窗体后台代码，将数据模型与窗体绑定<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WindDataBinding</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            <span class="keyword">this</span>.DataContext = <span class="keyword">new</span> WindDataBindingModel();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<p>实现效果：<br><img src="/images/wpf/1.gif" alt="image"><br>一个简单功能的MVVM模式开发例子就完成了，这里的属性通知和命令使用了Mvvm Light组件封装，使用起来很方便。<br>源码点击<a href="http://www.knna.me/files/mvvmdemo.rar">这里下载</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="WPF">WPF</h2><p>在客户对UI体验要求越来越高的今天，很多的公司和开发人员开始使用WPF进行开发，WPF的优势在哪里呢。列出我使用中体会比较深的一些点：</p>
<blockquote>
<ul>
<li>WPF提供非常漂亮的UI交互，基于WPF提供]]>
    </summary>
    
      <category term="MVVM" scheme="http://www.knna.me/tags/MVVM/"/>
    
      <category term="WPF" scheme="http://www.knna.me/tags/WPF/"/>
    
      <category term="DotNet技术" scheme="http://www.knna.me/categories/DotNet%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo部署问题：Error spawn git ENOENT]]></title>
    <link href="http://www.knna.me/2015/09/12/hexo%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98%EF%BC%9AError%20spawn%20git%20ENOENT/"/>
    <id>http://www.knna.me/2015/09/12/hexo部署问题：Error spawn git ENOENT/</id>
    <published>2015-09-12T15:43:55.000Z</published>
    <updated>2015-11-12T02:04:46.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>前面在github上部署的时候，出现了问题<code>Error: spawn git ENOENT</code>还没有解决，今天在另外的机子上部署的时候又出现了同样的问题，最后找到了解决方法。</p>

<h2 id="问题描述">问题描述</h2><p>执行<code>hexo d</code>报错</p>



<pre class="prettyprint"><code class=" hljs css"><span class="hljs-tag">Error</span>: <span class="hljs-tag">spawn</span> <span class="hljs-tag">git</span> <span class="hljs-tag">ENOENT</span>
    <span class="hljs-tag">at</span> <span class="hljs-tag">exports</span><span class="hljs-class">._errnoException</span> (<span class="hljs-tag">util</span><span class="hljs-class">.js</span><span class="hljs-pseudo">:746</span><span class="hljs-pseudo">:11)</span>
    <span class="hljs-tag">at</span> <span class="hljs-tag">Process</span><span class="hljs-class">.ChildProcess</span><span class="hljs-class">._handle</span><span class="hljs-class">.onexit</span> (<span class="hljs-tag">child_process</span><span class="hljs-class">.js</span><span class="hljs-pseudo">:1053</span><span class="hljs-pseudo">:32)</span>
    <span class="hljs-tag">at</span> <span class="hljs-tag">child_process</span><span class="hljs-class">.js</span><span class="hljs-pseudo">:1144</span><span class="hljs-pseudo">:20</span>
    <span class="hljs-tag">at</span> <span class="hljs-tag">process</span><span class="hljs-class">._tickCallback</span> (<span class="hljs-tag">node</span><span class="hljs-class">.js</span><span class="hljs-pseudo">:355</span><span class="hljs-pseudo">:11)</span></code></pre>

<p><a></a></p>



<h2 id="原因分析">原因分析</h2><p>具体原因我也说不清楚，网上有一个人在启动git-server的时候，也出现了同样的问题。所以，hexo部署的时候应该也是一系列git命令的合集，需要git-server的支持。</p>

<h2 id="解决方法">解决方法</h2><p>添加环境变量：<code>C:\Program Files (x86)\Git\bin;C:\Program Files (x86)\Git\libexec\git-core</code>，这样就解决了问题了。</p>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>前面在github上部署的时候，出现了问题<code>Error: spawn git ENOENT</code>还没有解决，今天在另外的机子上部署的时候又出现了同样的问题，最后找到了解决方法。</p>

<h2 id="问题描述">问]]>
    </summary>
    
      <category term="Hexo" scheme="http://www.knna.me/tags/Hexo/"/>
    
      <category term="Hexo" scheme="http://www.knna.me/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《人生就是一场突如其来的旅行-从微软到北极点》读完有感]]></title>
    <link href="http://www.knna.me/2015/09/12/%E3%80%8A%E4%BA%BA%E7%94%9F%E5%B0%B1%E6%98%AF%E4%B8%80%E5%9C%BA%E7%AA%81%E5%A6%82%E5%85%B6%E6%9D%A5%E7%9A%84%E6%97%85%E8%A1%8C-%E4%BB%8E%E5%BE%AE%E8%BD%AF%E5%88%B0%E5%8C%97%E6%9E%81%E7%82%B9%E3%80%8B%E8%AF%BB%E5%AE%8C%E6%9C%89%E6%84%9F/"/>
    <id>http://www.knna.me/2015/09/12/《人生就是一场突如其来的旅行-从微软到北极点》读完有感/</id>
    <published>2015-09-12T02:48:58.000Z</published>
    <updated>2015-12-30T03:28:46.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/reading/1.jpg" alt="image"></p>
<h2 id="刘润">刘润</h2><p>　　爱好旅行，徒步过隔壁，到达过珠峰大本营，登陆过南极大陆，抵达过北极点。除了《人生就是一场突如其来的旅行》外，还著有《2012，买张船票去南极》、《传统企业，互联网在踢门》。最有名的是很多年前发表的一篇文章《出租车司机给我上的MBA课》，被各网站、论坛、报纸等媒体转载，现在偶尔还能在微信朋友圈等社交媒体中看到此文章，不过文中的作者总是在变，哈哈哈~<br>　　在微软供职近14年，任微软战略合作总监，现创业开了一家互联网转型咨询公司-润米。他说他儿子叫小米，他叫刘润，所以公司名字定为润米。感觉挺有爱的。</p>
<h2 id="人生就是一场突如其来的旅行">人生就是一场突如其来的旅行</h2><p>　　刘润的人生经历是我非常欣赏和钦佩的，在每次面临抉择的时候都是毫不犹豫一往直前，给我这样比较思前想后想要做出改变的人很大的动力。<br>　　在毕业后进入一家公司做到技术领导，刘润说：某天听朋友说已经应聘上微软的职位要离开的时候，突然感觉原来微软离自己那么近，原来我们也是可以进入微软的，因为在之前微软一直是我心中向往的地方，不敢想能够去那样的公司供职，然后马上准备去面试，面试成功后，却面临着一个难以抉择的选择（好吧，至少对博主来说是难以抉择的），那就是微软开出的薪资还不如现在公司，是选择不作出改变，继续拿着高薪，还是选择相对较低的薪水，但是更多、更广阔的发展空间和机会？我没有过多考虑，就开始和同事做交接工作，准备进入人生新的阶段。<br>　　进入微软的时候，刘润给自己定下目标：在微软干两年就去开创自己的事业，但是一干就是十四年。在微软供职到第十年的时候，刘润收到了来自美国微软总部的水晶杯，纪念他为微软作出贡献的十年。这时候的刘润突然感觉，当年想好的只干几年已经过去了十年，自己的那份创业激情还在吗？于是在微软的第14个年头，他作出了改变，不能继续在微软，辞去了自己在微软战略合作总监的职务，去实现再过几年可能就会熄灭的梦想，创业梦想。<br>　　放着这么高的职务和薪资去追寻一个不确定的梦想，我想没有几个人会愿意做出改变吧！但是有没有想过现在这一切难道不是上一次做出的改变而获得的机会吗？<br>　　在辞去微软的工作以后，刘润给自己半年的时间，理清自己的现在和未来，找到属于自己的“北”，所以他登上了俄罗斯的核动力破冰船，去了北极，找北。<br>　　在去北极的同时，刘润也一直做着公益事业，他带了1000张明信片，将从最北边的邮局寄出，寄给那些为公益做出贡献的人们，打算是每张明信片都亲手写上一段祝福和感谢的话，因为时间来不及，就邀请了同船的朋友们一起完成。每个人听了他的计划以后都非常认真、积极的帮助他完成明信片；他还将带回北极的千年冰，做成项链送给那些做公益的志愿者们。真的是让人敬佩万分。<br>　　现在的刘润经营着一家互联网转型咨询公司，获得了比在微软的时候多很多的回报，并且能为无数的大小传统企业出谋划策，算是实现了他的创业梦想吧。<br>　　在书中有个很神奇的故事，可能就是缘分的最好诠释吧。<br><img src="/images/reading/2.jpg" alt="image"></p>
<p>– KNNA 2015-11-19</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/reading/1.jpg" alt="image"></p>
<h2 id="刘润">刘润</h2><p>　　爱好旅行，徒步过隔壁，到达过珠峰大本营，登陆过南极大陆，抵达过北极点。除了《人生就是一场突如其来的旅行》外，还著有《2012，]]>
    </summary>
    
      <category term="人生就是一场突如其来的旅行" scheme="http://www.knna.me/tags/%E4%BA%BA%E7%94%9F%E5%B0%B1%E6%98%AF%E4%B8%80%E5%9C%BA%E7%AA%81%E5%A6%82%E5%85%B6%E6%9D%A5%E7%9A%84%E6%97%85%E8%A1%8C/"/>
    
      <category term="阅读" scheme="http://www.knna.me/categories/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在windows7_64环境下搭建基于Github的静态博客]]></title>
    <link href="http://www.knna.me/2015/09/09/%E5%9C%A8windows7_64%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EGithub%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.knna.me/2015/09/09/在windows7_64环境下搭建基于Github的静态博客/</id>
    <published>2015-09-09T01:56:29.000Z</published>
    <updated>2015-12-30T06:09:08.000Z</updated>
    <content type="html"><![CDATA[<h1 id="准备工作">准备工作</h1><h2 id="下载工具并安装">下载工具并安装</h2><blockquote>
<ul>
<li><a href="http://git-scm.com/download/win" target="_blank" rel="external">下载Git</a></li>
<li><a href="https://nodejs.org/dist/latest/node-v4.0.0-x64.msi" target="_blank" rel="external">下载Node</a></li>
</ul>
</blockquote>
<h2 id="部署NodeJS和Git">部署NodeJS和Git</h2><blockquote>
<ul>
<li>CMD执行：npm install -g hexo</li>
<li>追加Git程序路径到环境变量的PATH：C:\Program Files\Git\cmd;</li>
<li>在磁盘中创建hexo工作目录，打开CMD，进入此文件夹下，执行后续操作</li>
<li>CMD执行：git init</li>
<li>CMD执行：hexo init</li>
<li>CMD执行：git config –global user.email “你的github登陆账号”</li>
<li>CMD执行：git config –global user.name “你的github用户名”</li>
<li>CMD执行：npm install</li>
</ul>
</blockquote>
<p>打开Git Bush 进入hexo目录执行这些代码：</p>
<blockquote>
<ul>
<li>npm install hexo –save</li>
<li>npm install hexo-server –save</li>
<li>npm install hexo-deployer-git –save</li>
</ul>
</blockquote>
<p>若需要RSS生成和sitemap生成则需要装两个插件，继续执行以下代码即可安装插件：</p>
<blockquote>
<ul>
<li>npm install hexo-generator-feed –save</li>
<li>npm install hexo-generator-sitemap –save</li>
</ul>
</blockquote>
<p>如果使用了RSS和sitemap则需要在hexo目录的_config.yml文件中增加以下内容：</p>
<blockquote>
<ul>
<li>rss: /atom.xml</li>
<li>sitemap: /sitemap.xml</li>
</ul>
</blockquote>
<p>配置GitHub</p>
<blockquote>
<ul>
<li>申请账号Github，<a href="https://github.com/" target="_blank" rel="external">点击这里</a></li>
<li>创建存储仓库</li>
</ul>
</blockquote>
<p>如图所示点击创建仓库：<br><img src="/images/public/6.jpg" alt="images"><br>输入一个Repository name并点击绿色按钮创建成功。<br><img src="/images/public/7.jpg" alt="images"><br>在项目仓库中点击settings进入设置页面<br><img src="/images/public/15.jpg" alt="images"><br>在设置页面中点击如下按钮，开始创建一个展示页<br><img src="/images/public/16.jpg" alt="images"><br>在主页创建界面下，直接点击如下按钮继续<br><img src="/images/public/17.jpg" alt="images"><br>继续点击完成展示页的创建<br><img src="/images/public/18.jpg" alt="images"><br>回到如图的项目仓库主页中，复制此页面上的Git路径<br><img src="/images/public/19.jpg" alt="images"><br>打开hexo的安装目录，然后打开_config.yml配置文件，在最后一个节点deploy中配置如下：<br><img src="/images/public/20.jpg" alt="images"></p>
<p>到此准备工作已完成，可以在cmd执行:hexo server打开本地服务器，进入<br><a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a><br>查看网站是否可用，CTRL + C 关闭服务器。</p>
<h2 id="创建SSH_Key">创建SSH Key</h2><p>若是现在直接上传会提示错误，需要先创建SHH Key。<br>在Git Bush终端输入：ssh-keygen -t rsa -C “your_email@example.com”<br>如果执行成功。返回<br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/home/forwhat.cn/.ssh/id_rsa):<br>在这里就是设置存储地址了.反正我是直接按的回车<br>然后还会返回<br>Enter passphrase (empty for no passphrase):<br>再次直接回车。<br>Enter same passphrase again:<br>再次回车。<br>Your identification has been saved in /home/forwhat.cn/.ssh/id_rsa.<br>Your public key has been saved in /home/forwhat.cn/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>这里有一串数。我把他屏蔽了。<br>The key’s randomart image is:<br>+–[ RSA 2048]—-+<br>| |<br>| |<br>| |<br>| o |<br>| + . S |<br>| . = . o |<br>| o + +o.o |<br>|E o . o.=+. |<br>|.+ ==+ooo. |<br>+—————–+<br>这样SSH key就生成了。<br>记事本打开：C:\Users\Administrator.ssh\id_rsa.pub复制所有内容，<br>进入github官网，将此Key追加到项目中，勾选允许写入。</p>
<h2 id="使SSH_Key生效">使SSH Key生效</h2><p>打开Git Bush，执行一次下载即可在：C:\Users\Administrator.ssh\<br>目录下自动生成known_hosts文件（不执行此步骤KEY将无法生效），<br>执行：git clone git@github.com:knna/test.git</p>
<h1 id="上传博客">上传博客</h1><p>所有工作做完以后,cmd执行：hexo generate，开始博客网站数据，继续执行：hexo deploy，开始上送。</p>
<h1 id="可能出现的错误">可能出现的错误</h1><p>如果使用git远程推送（hexo deploy）时出现如下问题：<br>[fulinux@ubuntu learngit]$ git push -u origin master<br>ssh: connect to host github.com port 22: Connection refused<br>fatal: Could not read from remote repository.<br>Please make sure you have the correct access rights<br>and the repository exists.<br>可能是端口错误，可以采用如下方法：<br>打开Git Bush，执行<br>vim .ssh/config<br>Host github.com<br>User fulinux@sina.com<br>Hostname ssh.github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa<br>Port 443<br>测试连接是否成功,打开Git Bush，执行:<br>ssh -T git@github.com<br>Hi fulinux! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
<h1 id="其他错误">其他错误</h1><p>可以检查hexo主目录的隐藏文件夹.git中的config文件里面的user节点是否正确；description文件里面的github仓库名称是否正确。</p>
<h1 id="hexo常用命令">hexo常用命令</h1><p>完整命令：hexo clean<br>结果：清理生成的数据<br>简写：无<br>完整命令：hexo server<br>结果：开启本地服务器<br>简写：hexo s<br>完整命令：hexo generate<br>结果：生成数据<br>简写：hexo g<br>完整命令：hexo deploy<br>结果：清理生成的数据<br>简写：hexo d<br>完整命令：hexo new 文章标题<br>结果：创建一个文章<br>简写：无</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="准备工作">准备工作</h1><h2 id="下载工具并安装">下载工具并安装</h2><blockquote>
<ul>
<li><a href="http://git-scm.com/download/win" target="_blank" rel="ext]]>
    </summary>
    
      <category term="Hexo博客搭建" scheme="http://www.knna.me/tags/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于select IO多路复用的socket通讯]]></title>
    <link href="http://www.knna.me/2015/06/19/%E5%9F%BA%E4%BA%8Eselect%20IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E7%9A%84socket%E9%80%9A%E8%AE%AF/"/>
    <id>http://www.knna.me/2015/06/19/基于select IO多路复用的socket通讯/</id>
    <published>2015-06-19T07:29:08.000Z</published>
    <updated>2015-11-25T02:12:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>简单来说就是可以使用一个线程，监视多个对象的状态，一旦某个对象就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。</p>
<p>与多线程和多进程相比，I/O多路复用的最大优势是系统开销小，系统不需要建立新的进程或者线程，也不必维护这些线程和进程。</p>
<h2 id="应用场景">应用场景</h2><blockquote>
<ul>
<li>客户程序需要同时处理交互式的输入和服务器之间的网络连接</li>
<li>客户端需要对多个网络连接作出反应</li>
<li>TCP服务器需要同时处理多个处于监听状态和多个连接状态的套接字</li>
<li>服务器需要处理多个网络协议的套接字</li>
<li>服务器需要同时处理不同的网络服务和协议</li>
</ul>
</blockquote>
<h2 id="C#实例">C#实例</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">IOSelect</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> ArrayList g_CliSocketArr = <span class="keyword">new</span> ArrayList();</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> Object thisLock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">StartListening</span>(<span class="params"></span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> Byte[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">           IPAddress ipAddress = IPAddress.Parse(<span class="string">"192.168.1.42"</span>);</span><br><span class="line">           IPEndPoint localEndPoint = <span class="keyword">new</span> IPEndPoint(ipAddress, <span class="number">1234</span>);</span><br><span class="line"></span><br><span class="line">           Socket listener = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span></span><br><span class="line">           &#123;</span><br><span class="line">               listener.Bind(localEndPoint);</span><br><span class="line">               listener.Listen(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">               Console.WriteLine(<span class="string">"开始监听"</span>);</span><br><span class="line"></span><br><span class="line">               Thread worker = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(WorkerThread));<span class="comment">//创建一个线程用于处理请求</span></span><br><span class="line">               worker.Start();</span><br><span class="line">               <span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   Socket sClient = listener.Accept();</span><br><span class="line">                   Console.WriteLine(<span class="string">"新连接请求"</span>);</span><br><span class="line">                   g_CliSocketArr.Add(sClient);</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">catch</span> (Exception e)</span><br><span class="line">           &#123;</span><br><span class="line">               Console.WriteLine(e.ToString());</span><br><span class="line">           &#125;</span><br><span class="line">           Console.WriteLine(<span class="string">"\n任意键继续"</span>);</span><br><span class="line">           Console.Read();</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WorkerThread</span>(<span class="params"></span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           Socket socket1 = <span class="keyword">null</span>;</span><br><span class="line">           ArrayList readList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">           <span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">lock</span> (thisLock)</span><br><span class="line">               &#123;</span><br><span class="line">                   readList.Clear();</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; g_CliSocketArr.Count; i++)</span><br><span class="line">                   &#123;</span><br><span class="line">                       readList.Add(g_CliSocketArr[i]);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (readList.Count &amp;lt;= <span class="number">0</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">try</span></span><br><span class="line">               &#123;</span><br><span class="line">                   Socket.Select(readList, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">500</span>);</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; readList.Count; i++)                    </span><br><span class="line">				&#123;                         socket1 = (Socket)readList[i];                         </span><br><span class="line">				Console.WriteLine(<span class="string">"新消息"</span>);                        </span><br><span class="line">				<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];                         </span><br><span class="line">				<span class="keyword">int</span> recLen = socket1.Receive(buffer);                       </span><br><span class="line">				<span class="keyword">if</span> (recLen &amp;gt; <span class="number">0</span>)</span><br><span class="line">                       &#123;</span><br><span class="line">                           <span class="comment">//dosomething</span></span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span></span><br><span class="line">                       &#123;<span class="comment">//如果返回0，表示客户端已经断开连接，须将此socket关闭然后从连接池中清除</span></span><br><span class="line">                           Console.WriteLine(<span class="string">"0字节接收"</span>);</span><br><span class="line">                           <span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">0</span>; ii &amp;lt; g_CliSocketArr.Count; ii++)</span><br><span class="line">                           &#123;</span><br><span class="line">                               Socket s = (Socket)g_CliSocketArr[ii];</span><br><span class="line">                               <span class="keyword">if</span> (s == socket1)</span><br><span class="line">                                   g_CliSocketArr.RemoveAt(ii);</span><br><span class="line">                           &#125;</span><br><span class="line">                           socket1.Shutdown(SocketShutdown.Both);</span><br><span class="line">                           socket1.Close();</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       socket1.Send(buffer, recLen, SocketFlags.None);</span><br><span class="line"></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">catch</span> (SocketException e)</span><br><span class="line">               &#123;</span><br><span class="line">                   Console.WriteLine(e.Message);</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">0</span>; ii &amp;lt; g_CliSocketArr.Count; ii++)</span><br><span class="line">                   &#123;</span><br><span class="line">                       Socket s = (Socket)g_CliSocketArr[ii];</span><br><span class="line">                       <span class="keyword">if</span> (s == socket1)</span><br><span class="line">                           g_CliSocketArr.RemoveAt(ii);</span><br><span class="line">                   &#125;</span><br><span class="line">                   socket1.Shutdown(SocketShutdown.Both);</span><br><span class="line">                   socket1.Close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span><br><span class="line">       </span>&#123;</span><br><span class="line">           StartListening();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2><p>该模型有个最大的缺点就是，它需要一个死循环不停的去遍历所有的客户端套接字集合，询问是否有数据到来，这样，如果连接的客户端很多，势必会影响处理客户端请求的效率，但它的优点就是解决了每一个客户端都去开辟新的线程与其通信的问题。如果有一个模型，可以不用去轮询客户端套接字集合，而是等待系统通知，当有客户端数据到来时，系统自动的通知我们的程序，有两个方案：</p>
<ul><br>    <li><strong>WsaAsyncSelect模型</strong>，基于windows窗体句柄消息的模型。</li><br>    <li><strong>WsaEventSelect模型</strong>，基于事件通知的模型，不依赖windows窗体句柄。</li><br></ul>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="介绍">介绍</h2><p>简单来说就是可以使用一个线程，监视多个对象的状态，一旦某个对象就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。</p>
<p>与多线程和多进程相比，I/O多路复用的最大优势是系统开销小，系统不需要建立新的进程或者线程，也]]>
    </summary>
    
      <category term="Socket" scheme="http://www.knna.me/tags/Socket/"/>
    
      <category term="DotNet技术" scheme="http://www.knna.me/categories/DotNet%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Oracle虚拟机虚拟硬盘修改路径后无法启动问题解决]]></title>
    <link href="http://www.knna.me/2015/06/17/Oracle%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%99%9A%E6%8B%9F%E7%A1%AC%E7%9B%98%E4%BF%AE%E6%94%B9%E8%B7%AF%E5%BE%84%E5%90%8E%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>http://www.knna.me/2015/06/17/Oracle虚拟机虚拟硬盘修改路径后无法启动问题解决/</id>
    <published>2015-06-17T05:33:49.000Z</published>
    <updated>2015-11-18T01:42:22.000Z</updated>
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p>在电脑中装了好几个虚拟机，今天把磁盘分了一下，重新打开虚拟机的时候提示错误：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cannot register the hard disk <span class="string">'D:\VDI\win7.vdi'</span> &#123;a9ab7757-<span class="number">6216</span>-<span class="number">4412</span>-<span class="number">877</span>e-edcd0ce3b45b&#125; because a hard disk </span><br><span class="line"><span class="string">'E:\VDI\win7.vdi'</span> with UUID &#123;a9ab7757-<span class="number">6216</span>-<span class="number">4412</span>-<span class="number">877</span>e-edcd0ce3b45b&#125; already exists.</span><br></pre></td></tr></table></figure></p>
<p>大概意思就是UUID标志符已存在，因为虚拟机记录在原始路径’E:\VDI\win7.vdi’已经有同样的虚拟硬盘加载。</p>
<h2 id="解决办法">解决办法</h2><blockquote>
<ul>
<li>打开CMD命令</li>
<li>CD转到 VirtualBox 安装目录</li>
<li>修改虚拟硬盘的UUID，cmd输入:VBoxManage internalcommands sethduuid “D:\VDI\win7.vdi”</li>
<li>启动Oralce虚拟机重新加载虚拟硬盘即可</li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="问题描述">问题描述</h2><p>在电脑中装了好几个虚拟机，今天把磁盘分了一下，重新打开虚拟机的时候提示错误：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span cl]]>
    </summary>
    
      <category term="Oracle虚拟机" scheme="http://www.knna.me/tags/Oracle%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Oracle数据库修改密码]]></title>
    <link href="http://www.knna.me/2015/06/12/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/"/>
    <id>http://www.knna.me/2015/06/12/Oracle数据库修改密码/</id>
    <published>2015-06-12T06:55:49.000Z</published>
    <updated>2015-11-18T01:42:48.000Z</updated>
    <content type="html"><![CDATA[<p>sqlplus / as sysdba 这是以SYSDBA这个角色登陆SQLPLUS，SYSDBA只是个角色，它本身并没有密码</p>
<p>用sysdba进入的时候,就可以改密码了<br>alter  user  username account  unlock  identifed  by  password</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>sqlplus / as sysdba 这是以SYSDBA这个角色登陆SQLPLUS，SYSDBA只是个角色，它本身并没有密码</p>
<p>用sysdba进入的时候,就可以改密码了<br>alter  user  username account  unlock  ide]]>
    </summary>
    
      <category term="Oracle" scheme="http://www.knna.me/tags/Oracle/"/>
    
      <category term="Oracle" scheme="http://www.knna.me/categories/Oracle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PLSql Developer 执行错误：动态执行表不可访问，本会话的自动统计被禁止]]></title>
    <link href="http://www.knna.me/2015/05/12/PLSql%20Developer%20%E6%89%A7%E8%A1%8C%E9%94%99%E8%AF%AF%EF%BC%9A%E5%8A%A8%E6%80%81%E6%89%A7%E8%A1%8C%E8%A1%A8%E4%B8%8D%E5%8F%AF%E8%AE%BF%E9%97%AE%EF%BC%8C%E6%9C%AC%E4%BC%9A%E8%AF%9D%E7%9A%84%E8%87%AA%E5%8A%A8%E7%BB%9F%E8%AE%A1%E8%A2%AB%E7%A6%81%E6%AD%A2/"/>
    <id>http://www.knna.me/2015/05/12/PLSql Developer 执行错误：动态执行表不可访问，本会话的自动统计被禁止/</id>
    <published>2015-05-12T07:21:40.000Z</published>
    <updated>2015-11-12T02:03:32.000Z</updated>
    <content type="html"><![CDATA[<h2 id="错误提示">错误提示</h2><p>第一次用<span lang="EN-US">PLSQL Developer</span>连接数据库，若用<span lang="EN-US">sys</span>用户登录并操作则正常，若用普通用户比如<span lang="EN-US">mbfeuser</span>登录并创建一个表后，执行相关的增删改查操作则报错“动态执行表不可访问，本会话的自动统计被禁止。在执行菜单里你可以禁止统计，或在<span lang="EN-US">v$session,v$sesstat</span>和<span lang="EN-US">v$statname</span>表里获得选择权限。”</p>
<h2 id="错误原因">错误原因</h2><p>从报错提示就可以看出，原因在于动态性能表相关的权限没有被授权给当前用户。</p>
<h2 id="解决方案">解决方案</h2><h3 id="方案1">方案1</h3><p>直接关闭自动统计功能。</p>
<p>操作方法：在PL/Sql顶部的菜单中选择“工具”<span lang="EN-US">–&gt;</span>“首选项”<span lang="EN-US">–&gt;</span>“选项”<span lang="EN-US">–&gt;</span>“自动统计”。把“自动统计”前面默认的√去掉。</p>
<p><img src="/images/public/1.jpg" alt="image"></p>
<h3 id="方法2">方法2</h3><p>用sys账户为mbfeuser账户授权或者为所有账户统一授权</p>
<p>给mbfeuser授权</p>
<p>grant select on V_session to mbfeuser;</p>
<p>grant select on V_$sesstat to mbfeuser;</p>
<p>grant select on V_$statname to mbfeuser;</p>
<p>给所有用户授权</p>
<p>grant select on V_$session to public;</p>
<p>grant select on V_$sesstat to public;</p>
<p>grant select on V_$statname to public;</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="错误提示">错误提示</h2><p>第一次用<span lang="EN-US">PLSQL Developer</span>连接数据库，若用<span lang="EN-US">sys</span>用户登录并操作则正常，若用普通用户比如<span lang="E]]>
    </summary>
    
      <category term="PLSQL" scheme="http://www.knna.me/tags/PLSQL/"/>
    
      <category term="Oracle" scheme="http://www.knna.me/categories/Oracle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Oracle 操作错误提示 table or view does not exist]]></title>
    <link href="http://www.knna.me/2015/05/12/Oracle%20%E6%93%8D%E4%BD%9C%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA%20table%20or%20view%20does%20not%20exist/"/>
    <id>http://www.knna.me/2015/05/12/Oracle 操作错误提示 table or view does not exist/</id>
    <published>2015-05-12T07:17:11.000Z</published>
    <updated>2015-09-17T08:25:52.000Z</updated>
    <content type="html"><![CDATA[<p>一般情况下由于没有为当前用户赋予查询的表、视图、字典的权限，会出现这个问题。</p>
<p></p><h2>解决</h2><br>进入服务器，打开CMD，输入 sqlplus / as sysdba，接着执行 GRANT SELECT ANY DICTIONARY TO current_user;  这里的current_user是需要赋予权限的用户名<p></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一般情况下由于没有为当前用户赋予查询的表、视图、字典的权限，会出现这个问题。</p>
<p></p><h2>解决</h2><br>进入服务器，打开CMD，输入 sqlplus / as sysdba，接着执行 GRANT SELECT ANY DICTIONARY TO c]]>
    </summary>
    
      <category term="Oracle" scheme="http://www.knna.me/tags/Oracle/"/>
    
      <category term="Oracle" scheme="http://www.knna.me/categories/Oracle/"/>
    
  </entry>
  
</feed>
